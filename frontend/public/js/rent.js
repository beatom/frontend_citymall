/*
/!**
 * Add META tags (description, keywords, author) to page.
 *!/
var addMetaTags = function(text){
	//
	var meta = document.createElement('meta');
	meta.name = 'description';
	meta.content = text + '. ' +
		'Карта-Навигатор с проекциями Proj4js. ' +
		'HTML5 Canvas+SVG vector map with some Proj4js projections. ' +
		'Pure javascript and serverless';
	document.getElementsByTagName('head')[0].appendChild(meta);
	//
	var meta = document.createElement('meta');
	meta.name = 'keywords';
	meta.content = text + ', ' +
		'карта, html5, canvas, svg, 2d, vector, proj4js, projection, javascript, dbcartajs, map';
	document.getElementsByTagName('head')[0].appendChild(meta);
	//
	var meta = document.createElement('meta');
	meta.name = 'author';
	meta.content = 'Grigoriy Eremin';
	document.getElementsByTagName('head')[0].appendChild(meta);
	//
	var meta = document.createElement('meta');
	meta.name = 'google-site-verification';
	meta.content = 'tDIIwt3nNSOeRwaSbOPKjWIuVvKvi6E7YCLV_WOnCqE';
	document.getElementsByTagName('head')[0].appendChild(meta);
	//
	var meta = document.createElement('meta');
	meta.name = 'yandex-verification';
	meta.content = '494e5b88af1227b8';
	document.getElementsByTagName('head')[0].appendChild(meta);
};
/!**
 * Add Google Analytics counter.
 *!/
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-25857345-3', 'dbcartajs.appspot.com');
ga('send', 'pageview');
$('#slider0').slider();
/!**
 * List with coords of Moscow Metro lines and stations
 *  [[ftype, ftag, coords, label, centerof, ismap],...]
 * Three points with coords and 'Q' literal implements to bezierCurveTo (...) method.
 * egax@bk.ru, 2013-16.
 *!/
var MLINES = [
	['moskva_canal', 'mc', [
		[-120, 29],
		[-118, 32, 'Q'], [-118, 35, 'Q'], [-118, 39, 'Q'],
		[-115, 60, 'Q'], [-115, 64, 'Q'], [-113, 67, 'Q'],
		[-99, 80, 'Q'], [-97, 83, 'Q'], [-97, 86, 'Q'],
		[-97, 152]
	]
	],
	['strogino_lake_exit', 'sle', [
		[-138, 65],
		[-130, 71, 'Q'], [-127, 74, 'Q'], [-124, 74, 'Q'],
		[-119, 74, 'Q'], [-117, 74, 'Q'], [-117, 71.5, 'Q'],
		[-117, 71.5, 'Q'], [-117, 68.5, 'Q'], [-119, 68.5, 'Q'],
		[-131, 68.5],
		[-138, 65]
	]
	],
	['vodootvodny_canal', 'vc', [
		[-30, -40],
		[-27, -40, 'Q'], [-24, -40, 'Q'], [-21, -38, 'Q'],
		[-13, -30, 'Q'], [-9, -27, 'Q'], [-7, -27, 'Q'],
		[18, -27, 'Q'], [24, -27, 'Q'], [27, -31, 'Q'],
		[55, -59]
	]
	],
	['yauza_river', 'yr', [
		[31, -27],
		[65, -27, 'Q'], [77, -27, 'Q'], [77, -15, 'Q'],
		[77, 30, 'Q'], [77, 34, 'Q'], [80, 34, 'Q'],
		[80, 34, 'Q'], [83, 34, 'Q'], [83, 38, 'Q'],
		[83, 71, 'Q'], [83, 76, 'Q'], [79, 80, 'Q'],
		[59, 99, 'Q'], [55, 103, 'Q'], [50, 103, 'Q'],
		[42, 103, 'Q'], [32, 103, 'Q'], [32, 113, 'Q'],
		[32, 114, 'Q'], [32, 121, 'Q'], [39, 127, 'Q'],
		[63, 147]
	]
	],
	['Nagatino_poyma', 'np', [
		[58, -108],
		[66.8, -100.3, 'Q'], [69, -98, 'Q'], [71.5, -98, 'Q'],
		[72.5, -98, 'Q'], [74.7, -98, 'Q'], [77, -100, 'Q'],
		[83, -106, 'Q'], [85, -108, 'Q'], [85, -116, 'Q']
	]
	],
	['grebnoy_canal', 'gc', [
		[-138, 51], [-127, 53], [-122, 53], [-132, 51], [-138, 51]
	]
	],
	['moskva_river', 'mr', [
		[-175, 78],
		[-119, 78, 'Q'], [-110, 78, 'Q'], [-110, 71.5, 'Q'],
		[-110, 71.5, 'Q'], [-110, 65, 'Q'], [-119, 65, 'Q'],
		[-135, 65, 'Q'], [-144, 65, 'Q'], [-144, 61, 'Q'],
		[-144, 61, 'Q'], [-144, 57, 'Q'], [-135, 57, 'Q'],
		[-116, 57, 'Q'], [-113, 57, 'Q'], [-113, 52, 'Q'],
		[-113, 52, 'Q'], [-113, 47, 'Q'], [-116, 47, 'Q'],
		[-144, 47, 'Q'], [-150, 47, 'Q'], [-150, 39.5, 'Q'],
		[-150, 39.5, 'Q'], [-150, 32, 'Q'], [-144, 32, 'Q'],
		[-129, 32, 'Q'], [-120, 32, 'Q'], [-120, 28, 'Q'], //
		[-120, 12, 'Q'], [-120, 8, 'Q'], [-116, 6, 'Q'],
		[-67, 6, 'Q'], [-59, 6, 'Q'], [-59, -2, 'Q'],
		[-59, -31, 'Q'], [-59, -38, 'Q'], [-63, -41, 'Q'],
		[-96, -73, 'Q'], [-109, -85, 'Q'], [-98, -93, 'Q'],
		[-98, -93, 'Q'], [-90, -99, 'Q'], [-81, -90, 'Q'],
		[-14, -24, 'Q'], [-10, -20, 'Q'], [-5, -20, 'Q'],
		[19, -20, 'Q'], [25, -20, 'Q'], [28, -24, 'Q'],
		[52, -47, 'Q'], [55, -51, 'Q'], [55, -57, 'Q'],
		[55, -105, 'Q'], [55, -109, 'Q'], [65, -109, 'Q'],
		[79, -109, 'Q'], [85, -109, 'Q'], [85, -115, 'Q'],
		[85, -115, 'Q'], [85, -117, 'Q'], [80, -120.5, 'Q'],
		[80, -120.5, 'Q'], [74, -124, 'Q'], [74, -130, 'Q'],
		[74, -131, 'Q'], [74, -141, 'Q'], [84, -141, 'Q'],
		[102, -141, 'Q'], [106, -141, 'Q'], [111, -147, 'Q'],
		[233, -272]
	]
	],
//
	['sheremetyevo_express_line', 'sheremetyevo_express', [
		[-51, 55],
		[-23, 83, 'Q'], [-20, 86, 'Q'], [-20, 90, 'Q'],
		[-20, 149, 'Q'], [-20, 153, 'Q'], [-23, 153, 'Q'],
		[-29, 153]
	]
	],
	['sheremetyevo_express_line_d', 'sheremetyevo_express', [
		[-51, 55],
		[-23, 83, 'Q'], [-20, 86, 'Q'], [-20, 90, 'Q'],
		[-20, 149, 'Q'], [-20, 153, 'Q'], [-23, 153, 'Q'],
		[-29, 153]
	]
	],
	['vnukovo_express_line', 'vnukovo_express', [
		[-75, -20],
		[-94, -20, 'Q'], [-99, -20, 'Q'], [-103, -25, 'Q'],
		[-132, -65],
		[-163, -96, 'Q'], [-166, -99, 'Q'], [-166, -102, 'Q'],
		[-166, -119, 'Q'], [-166, -121, 'Q'], [-163, -121, 'Q'],
		[-160, -121]
	]
	],
	['vnukovo_express_line_d', 'vnukovo_express', [
		[-75, -20],
		[-94, -20, 'Q'], [-99, -20, 'Q'], [-103, -25, 'Q'],
		[-132, -65],
		[-163, -96, 'Q'], [-166, -99, 'Q'], [-166, -102, 'Q'],
		[-166, -119, 'Q'], [-166, -121, 'Q'], [-163, -121, 'Q'],
		[-160, -121]
	]
	],
	['domodedovo_express_line', 'domodedovo_express', [
		[51, -61], [51, -179]
	]
	],
	['domodedovo_express_line_d', 'domodedovo_express', [
		[51, -61], [51, -179]
	]
	],
//
	['r1', 'r1', [
		[102, 85],
		[38, 21, 'Q'], [36, 19, 'Q'], [34, 19, 'Q'],
		[20, 19, 'Q'], [17, 19, 'Q'], [14, 17, 'Q'],
		[-100, -97], [-115.9, -113.59],
		[-108.05, -105.4], [-123, -121], [-141, -140]
	]
	],
	['r1_ext', 'r1', []
	],
	['r2', 'r2', [
		[-92, 107, 'Q'], [-92, 102, 'Q'], [-90, 100, 'Q'],
		[-34, 45, 'Q'], [-31, 42, 'Q'], [-31, 38, 'Q'],
		[-31, 31, 'Q'], [-31, 27, 'Q'], [-29, 24, 'Q'],
		[20, -25, 'Q'], [23, -27, 'Q'], [23, -31, 'Q'],
		[23, -33, 'Q'], [23, -37, 'Q'], [26, -39, 'Q'],
		[65, -78, 'Q'], [68, -81, 'Q'], [68, -85, 'Q'],
		[68, -143, 'Q'], [68, -146, 'Q'], [70, -149, 'Q'],
		[81, -160],
		[95, -160]
	]
	],
	['r2_ext', 'r2', [
		[-92, 122], [-92, 107]
	]
	],
	['r3', 'r3', [
		[-159, 98],
		[-159, 18, 'Q'], [-159, 15, 'Q'], [-156, 12, 'Q'],
		[-130, -14, 'Q'], [-128, -16, 'Q'], [-124, -16, 'Q'],
		[-36, -16, 'Q'], [-33, -16, 'Q'], [-30, -14, 'Q'],
		[-30, -14, 'Q'], [-26, -11, 'Q'], [-24, -11, 'Q'],
		[53, -11, 'Q'], [57, -11, 'Q'], [59, -9, 'Q'],
		[137, 69]
	]
	],
	['r4', 'r4_1', [
		[-159, 34],
		[-131, 6, 'Q'], [-128, 3, 'Q'], [-124, 3, 'Q'],
		[-104, 3, 'Q'], [-101, 3, 'Q'], [-97, 0, 'Q'],
		[-93, -3, 'Q'], [-89, -6, 'Q'], [-87, -6, 'Q'],
		[-72, -6, 'Q'], [-68, -2, 'Q'], [-64, -2, 'Q'],
		[-26, -2, 'Q'], [-23, -2, 'Q'], [-20, -5, 'Q'],
		[-19, -6]
	]
	],
	['r4', 'r4_2', [
		[-72, -6],
		[-112, 21]
	]
	],
	['r5', 'r5', [
		[-70, 0], [-69.86, 4.40], [-69.45, 8.77], [-68.76, 13.12], [-67.80, 17.41], [-66.57, 21.63], [-65.08, 25.77], [-63.34, 29.80], [-61.34, 33.72], [-59.10, 37.51], [-56.63, 41.14], [-53.94, 44.62], [-51.03, 47.92], [-47.92, 51.03], [-44.62, 53.94], [-41.14, 56.63], [-37.51, 59.10], [-33.72, 61.34], [-29.80, 63.34], [-25.77, 65.08], [-21.63, 66.57], [-17.41, 67.80], [-13.12, 68.76], [-8.77, 69.45], [-4.40, 69.86], [0.00, 70.00], [4.40, 69.86], [8.77, 69.45], [13.12, 68.76], [17.41, 67.80], [21.63, 66.57], [25.77, 65.08], [29.80, 63.34], [33.72, 61.34], [37.51, 59.10], [41.14, 56.63], [44.62, 53.94], [47.92, 51.03], [51.03, 47.92], [53.94, 44.62], [56.63, 41.14], [59.10, 37.51], [61.34, 33.72], [63.34, 29.80], [65.08, 25.77], [66.57, 21.63], [67.80, 17.41], [68.76, 13.12], [69.45, 8.77], [69.86, 4.40], [70.00, 0.00], [69.86, -4.40], [69.45, -8.77], [68.76, -13.12], [67.80, -17.41], [66.57, -21.63], [65.08, -25.77], [63.34, -29.80], [61.34, -33.72], [59.10, -37.51], [56.63, -41.14], [53.94, -44.62], [51.03, -47.92], [47.92, -51.03], [44.62, -53.94], [41.14, -56.63], [37.51, -59.10], [33.72, -61.34], [29.80, -63.34], [25.77, -65.08], [21.63, -66.57], [17.41, -67.80], [13.12, -68.76], [8.77, -69.45], [4.40, -69.86], [0.00, -70.00], [-4.40, -69.86], [-8.77, -69.45], [-13.12, -68.76], [-17.41, -67.80], [-21.63, -66.57], [-25.77, -65.08], [-29.80, -63.34], [-33.72, -61.34], [-37.51, -59.10], [-41.14, -56.63], [-44.62, -53.94], [-47.92, -51.03], [-51.03, -47.92], [-53.94, -44.62], [-56.63, -41.14], [-59.10, -37.51], [-61.34, -33.72], [-63.34, -29.80], [-65.08, -25.77], [-66.57, -21.63], [-67.80, -17.41], [-68.76, -13.12], [-69.45, -8.77], [-69.86, -4.40], [-70, 0]
	], 'Radial'
	],
	['r6', 'r6', [
		[36, 129],
		[36, 38, 'Q'], [36, 35, 'Q'], [34, 32, 'Q'],
		[34, 32, 'Q'], [31, 28, 'Q'], [31, 26, 'Q'],
		[31, -22, 'Q'], [31, -26, 'Q'], [28, -29, 'Q'],
		[-41, -99, 'Q'], [-44, -102, 'Q'], [-44, -106, 'Q'],
		[-44, -168]
	]
	],
	['r6_ext', 'r6', [
		[36, 129], [36, 145]
	]
	],
	['r7', 'r7', [
		[-105, 99],
		[-105, 79, 'Q'], [-105, 75, 'Q'], [-103, 73, 'Q'],
		[-60, 31, 'Q'], [-58, 29, 'Q'], [-55, 29, 'Q'],
		[0, 29, 'Q'], [3, 29, 'Q'], [5, 27, 'Q'],
		[26, 6, 'Q'], [28, 4, 'Q'], [28, 0, 'Q'],
		[28, -10, 'Q'], [28, -14, 'Q'], [31, -16, 'Q'],
		[92, -77, 'Q'], [94.5, -80, 'Q'], [98, -80, 'Q'],
		[151, -80, 'Q'], [155, -80, 'Q'], [158, -84, 'Q'],
		[158, -84, 'Q'], [160, -87, 'Q'], [160, -90, 'Q'],
		[160, -90, 'Q'], [160, -93, 'Q'], [157, -96, 'Q'],
		[136, -117, 'Q'], [133, -120, 'Q'], [133, -124, 'Q'],
		[133, -126]
	]
	],
	['r8', 'r8', [
		[18, -39], [90, -39], [136, 6]
	]
	],
	['r8', 'r8_1', [
		[-97, 11],
		[-106, 11, 'Q'], [-109, 11, 'Q'], [-112, 8, 'Q'],
		[-117, 3, 'Q'], [-120, 0, 'Q'], [-120, -3, 'Q'],
		[-120, -16]
	]
	],
	['r8_ext', 'r8', [
		[18.15, -39],
		[-21, -39, 'Q'], [-24, -39, 'Q'], [-27, -37, 'Q'],
		[-74, 8, 'Q'], [-77, 11, 'Q'], [-80, 11, 'Q'],
		[-97, 11]
	]
	],
	['r8_ext', 'r8_1', [
		[-120, -16],
		[-120, -59, 'Q'], [-120, -62, 'Q'], [-123, -65, 'Q'],
		[-162, -105]
	]
	],
	['r9', 'r9', [
		[0, 146],
		[0, 137, 'Q'], [0, 134, 'Q'], [-2, 131, 'Q'],
		[-26, 107, 'Q'], [-29, 104, 'Q'], [-29, 101, 'Q'],
		[-29, 76, 'Q'], [-29, 73, 'Q'], [-26, 70, 'Q'],
		[-5, 48, 'Q'], [-4, 47, 'Q'], [-4, 46, 'Q'],
		[-4, 41, 'Q'], [-4, 40, 'Q'], [-5, 39, 'Q'],
		[-18, 25.06, 'Q'], [-19, 24, 'Q'], [-19, 21, 'Q'],
		[-19, -19, 'Q'], [-19, -22, 'Q'], [-16, -25, 'Q'],
		[16, -58, 'Q'], [19, -61, 'Q'], [19, -64, 'Q'],
		[19, -127, 'Q'], [19, -130, 'Q'], [16, -133, 'Q'],
		[-12, -168]
	]
	],
	['r10', 'r10', [
		[1, 87, 'Q'], [4, 85, 'Q'], [4, 81, 'Q'],
		[4, 45, 'Q'], [4, 41, 'Q'], [7, 38, 'Q'],
		[82, -36, 'Q'], [84, -38, 'Q'], [84, -42, 'Q'],
		[84, -72, 'Q'], [84, -74.5, 'Q'], [87, -78, 'Q'],
		[105, -96, 'Q'], [108, -99, 'Q'], [108, -103, 'Q'],
		[108, -106, 'Q'], [108, -109, 'Q'], [105, -112, 'Q'],
		[87, -130, 'Q'], [84, -133, 'Q'], [84, -137, 'Q'],
		[84, -163]
	]
	],
	['r10_ext', 'r10', [
		[1, 87],
		[-22, 112, 'Q'], [-24, 114, 'Q'], [-24, 118, 'Q'],
		[-24, 146]
	]
	],
	['r11', 'r11', [
		[20, -135],
		[62, -135, 'Q'], [68, -135, 'Q'], [68, -129, 'Q']
	]
	],
	['r12', 'r12', [
		[-16, -168],
		[-22, -176, 'Q'], [-24, -179, 'Q'], [-26, -179, 'Q'],
		[-87, -179]
	]
	],
	['r12_ext', 'r12_1', [
		[-87, -179], [-150, -179]
	]
	],
	['r12', 'r12_2', [
		[-41, -168], [-16, -168]
	]
	],
	['rTPK', 'rTPK_1', [
		[-112, -159], [-78, -118],
		[-78, -100, 'Q'], [-78, -98, 'Q'], [-80, -96, 'Q'],
		[-90, -87], [-90, 1],
		[-104, 11, 'Q'], [-116, 18, 'Q'], [-116, 20, 'Q'],
		[-116, 30, 'Q'], [-116, 32, 'Q'], [-112, 32, 'Q'],
		[-86, 32, 'Q'], [-80, 32, 'Q'], [-80, 36, 'Q'],
		[-80, 44],
		[-44, 80, 'Q'], [-42, 82, 'Q'], [-38, 82, 'Q'],
		[57, 82, 'Q'], [60, 82, 'Q'], [63, 80, 'Q'],
		[77, 65, 'Q'], [80, 62, 'Q'], [80, 59, 'Q'],
		[80, 19, 'Q'], [80, 15, 'Q'], [83, 13, 'Q'],
		[101, -4, 'Q'], [103, -7, 'Q'], [103, -11, 'Q'],
		[103, -24, 'Q'], [103, -27, 'Q'], [106, -30, 'Q'],
		[124, -48], [124, -53, 'Q'], [124, -55, 'Q'], [123, -56, 'Q'],
		[93, -92.46],
		[68, -129]
	]
	],
	['rTPK', 'rTPK_2', [
		[-80, 44],
		[-82, 42, 'Q'], [-84, 40, 'Q'], [-88, 40, 'Q'],
		[-143, 40, 'Q'], [-147, 40, 'Q'], [-149, 37, 'Q'],
		[-163, 23, 'Q'], [-166, 20, 'Q'], [-166, 17, 'Q'],
		[-166, -1, 'Q'], [-166, -5, 'Q'], [-164, -7, 'Q'],
		[-113, -58, 'Q'], [-110, -60, 'Q'], [-110, -64, 'Q'],
		[-110, -100.95],
		[-50, -133],
		[14.5, -133]
	]
	],
	['rKOZH', 'rKOZH', [
		[106, -30],
		[135, -59, 'Q'], [137, -61, 'Q'], [137, -65, 'Q'],
		[137, -82, 'Q'], [137, -85, 'Q'], [140, -88, 'Q'],
		[162, -112, 'Q'], [165, -115, 'Q'], [165, -118, 'Q'],
		[165, -138]
	]
	],
	['monorail', 'mn', [
		[-26, 101], [43, 101]
	]
	],
	['mck', 'mck', [
		[-117, 0], [-116.769127226108, 7.34649078492966], [-116.077420053794, 14.6639883270236], [-114.927608335257, 21.9236138065298], [-113.32422985205, 29.096716798288], [-111.273612406533, 36.1549883418688], [-108.783848848925, 43.0705726641073], [-105.864765138524, 49.8161771131135], [-102.527881565132, 56.3651798699007], [-98.7863672837358, 62.6917350125426], [-94.6549883418689, 68.7708745182194], [-90.1500494047673, 74.5786068005967], [-85.2893294083052, 80.0920113936566], [-80.0920113936566, 85.2893294083052], [-74.5786068005967, 90.1500494047673], [-68.7708745182193, 94.6549883418689], [-62.6917350125426, 98.7863672837358], [-56.3651798699007, 102.527881565132], [-49.8161771131135, 105.864765138524], [-43.0705726641073, 108.783848848925], [-36.1549883418689, 111.273612406533], [-29.096716798288, 113.32422985205], [-21.9236138065298, 114.927608335257], [-14.6639883270236, 116.077420053794], [-7.34649078492966, 116.769127226108], [1.88150350012166e-14, 117], [7.34649078492967, 116.769127226108], [14.6639883270236, 116.077420053794], [21.9236138065298, 114.927608335257], [29.096716798288, 113.32422985205], [36.1549883418689, 111.273612406533], [43.0705726641073, 108.783848848925], [49.8161771131135, 105.864765138524], [56.3651798699007, 102.527881565132], [62.6917350125426, 98.7863672837358], [68.7708745182193, 94.6549883418689], [74.5786068005967, 90.1500494047673], [80.0920113936566, 85.2893294083051], [85.2893294083052, 80.0920113936565], [90.1500494047674, 74.5786068005967], [94.6549883418688, 68.7708745182194], [98.7863672837358, 62.6917350125426], [102.527881565132, 56.3651798699007], [105.864765138524, 49.8161771131135], [108.783848848925, 43.0705726641073], [111.273612406533, 36.1549883418688], [113.32422985205, 29.096716798288], [114.927608335257, 21.9236138065298], [116.077420053794, 14.6639883270236], [116.769127226108, 7.34649078492964], [117, -3.76300700024333e-14], [116.769127226108, -7.34649078492966], [116.077420053794, -14.6639883270236], [114.927608335257, -21.9236138065298], [113.32422985205, -29.096716798288], [111.273612406533, -36.1549883418689], [108.783848848925, -43.0705726641074], [105.864765138524, -49.8161771131135], [102.527881565132, -56.3651798699007], [98.7863672837358, -62.6917350125426], [94.6549883418688, -68.7708745182194], [90.1500494047673, -74.5786068005967], [85.2893294083052, -80.0920113936566], [80.0920113936566, -85.2893294083052], [74.5786068005967, -90.1500494047674], [68.7708745182194, -94.6549883418688], [62.6917350125426, -98.7863672837358], [56.3651798699007, -102.527881565132], [49.8161771131134, -105.864765138524], [43.0705726641073, -108.783848848925], [36.1549883418689, -111.273612406533], [29.096716798288, -113.32422985205], [21.9236138065298, -114.927608335257], [14.6639883270235, -116.077420053794], [7.34649078492965, -116.769127226108], [2.1492551325036e-14, -117], [-7.34649078492971, -116.769127226108], [-14.6639883270236, -116.077420053794], [-21.9236138065298, -114.927608335257], [-29.096716798288, -113.32422985205], [-36.1549883418688, -111.273612406533], [-43.0705726641074, -108.783848848925], [-49.8161771131135, -105.864765138524], [-56.3651798699007, -102.527881565132], [-62.6917350125426, -98.7863672837358], [-68.7708745182194, -94.6549883418688], [-74.5786068005967, -90.1500494047673], [-80.0920113936566, -85.2893294083052], [-85.2893294083052, -80.0920113936565], [-90.1500494047674, -74.5786068005967], [-94.6549883418689, -68.7708745182193], [-98.7863672837358, -62.6917350125426], [-102.527881565132, -56.3651798699007], [-105.864765138524, -49.8161771131134], [-108.783848848925, -43.0705726641073], [-111.273612406533, -36.1549883418688], [-113.32422985205, -29.096716798288], [-114.927608335257, -21.9236138065298], [-116.077420053794, -14.6639883270235], [-116.769127226108, -7.34649078492965], [-117, 0]
	], 'MCK'
	],
	['mck_d', 'mck_d', [
		[-117, 0], [-116.769127226108, 7.34649078492966], [-116.077420053794, 14.6639883270236], [-114.927608335257, 21.9236138065298], [-113.32422985205, 29.096716798288], [-111.273612406533, 36.1549883418688], [-108.783848848925, 43.0705726641073], [-105.864765138524, 49.8161771131135], [-102.527881565132, 56.3651798699007], [-98.7863672837358, 62.6917350125426], [-94.6549883418689, 68.7708745182194], [-90.1500494047673, 74.5786068005967], [-85.2893294083052, 80.0920113936566], [-80.0920113936566, 85.2893294083052], [-74.5786068005967, 90.1500494047673], [-68.7708745182193, 94.6549883418689], [-62.6917350125426, 98.7863672837358], [-56.3651798699007, 102.527881565132], [-49.8161771131135, 105.864765138524], [-43.0705726641073, 108.783848848925], [-36.1549883418689, 111.273612406533], [-29.096716798288, 113.32422985205], [-21.9236138065298, 114.927608335257], [-14.6639883270236, 116.077420053794], [-7.34649078492966, 116.769127226108], [1.88150350012166e-14, 117], [7.34649078492967, 116.769127226108], [14.6639883270236, 116.077420053794], [21.9236138065298, 114.927608335257], [29.096716798288, 113.32422985205], [36.1549883418689, 111.273612406533], [43.0705726641073, 108.783848848925], [49.8161771131135, 105.864765138524], [56.3651798699007, 102.527881565132], [62.6917350125426, 98.7863672837358], [68.7708745182193, 94.6549883418689], [74.5786068005967, 90.1500494047673], [80.0920113936566, 85.2893294083051], [85.2893294083052, 80.0920113936565], [90.1500494047674, 74.5786068005967], [94.6549883418688, 68.7708745182194], [98.7863672837358, 62.6917350125426], [102.527881565132, 56.3651798699007], [105.864765138524, 49.8161771131135], [108.783848848925, 43.0705726641073], [111.273612406533, 36.1549883418688], [113.32422985205, 29.096716798288], [114.927608335257, 21.9236138065298], [116.077420053794, 14.6639883270236], [116.769127226108, 7.34649078492964], [117, -3.76300700024333e-14], [116.769127226108, -7.34649078492966], [116.077420053794, -14.6639883270236], [114.927608335257, -21.9236138065298], [113.32422985205, -29.096716798288], [111.273612406533, -36.1549883418689], [108.783848848925, -43.0705726641074], [105.864765138524, -49.8161771131135], [102.527881565132, -56.3651798699007], [98.7863672837358, -62.6917350125426], [94.6549883418688, -68.7708745182194], [90.1500494047673, -74.5786068005967], [85.2893294083052, -80.0920113936566], [80.0920113936566, -85.2893294083052], [74.5786068005967, -90.1500494047674], [68.7708745182194, -94.6549883418688], [62.6917350125426, -98.7863672837358], [56.3651798699007, -102.527881565132], [49.8161771131134, -105.864765138524], [43.0705726641073, -108.783848848925], [36.1549883418689, -111.273612406533], [29.096716798288, -113.32422985205], [21.9236138065298, -114.927608335257], [14.6639883270235, -116.077420053794], [7.34649078492965, -116.769127226108], [2.1492551325036e-14, -117], [-7.34649078492971, -116.769127226108], [-14.6639883270236, -116.077420053794], [-21.9236138065298, -114.927608335257], [-29.096716798288, -113.32422985205], [-36.1549883418688, -111.273612406533], [-43.0705726641074, -108.783848848925], [-49.8161771131135, -105.864765138524], [-56.3651798699007, -102.527881565132], [-62.6917350125426, -98.7863672837358], [-68.7708745182194, -94.6549883418688], [-74.5786068005967, -90.1500494047673], [-80.0920113936566, -85.2893294083052], [-85.2893294083052, -80.0920113936565], [-90.1500494047674, -74.5786068005967], [-94.6549883418689, -68.7708745182193], [-98.7863672837358, -62.6917350125426], [-102.527881565132, -56.3651798699007], [-105.864765138524, -49.8161771131134], [-108.783848848925, -43.0705726641073], [-111.273612406533, -36.1549883418688], [-113.32422985205, -29.096716798288], [-114.927608335257, -21.9236138065298], [-116.077420053794, -14.6639883270235], [-116.769127226108, -7.34649078492965], [-117, 0]
	], 'MCK'
	],
//
	['interchange', 'Kievskaya', [
		[-72, -16], [-72, -6], [-69.09, -11], [-72, -16]
	]
	],
	['interchange_d', 'Kievskaya', [
		[-72, -16], [-72, -6], [-69.09, -11], [-72, -16]
	]
	],
	['interchange', 'Rossyskaya-Kutuzovsky_Prospekt', [
		[-69.38, 9.24], [-69.38, 3.63]
	]
	],
	['interchange_d', 'Rossyskaya-Kutuzovsky_Prospekt', [
		[-69.38, 9.24], [-69.38, 3.63]
	]
	],
	['interchange', 'Krasnopresnenskaya-Barrikadnaya', [
		[-64.8, 26.41], [-60.34, 31.34]
	]
	],
	['interchange_d', 'Krasnopresnenskaya-Barrikadnaya', [
		[-64.8, 26.41], [-60.34, 31.34]
	]
	],
	['interchange', 'Belorusskaya', [
		[-47, 51.84], [-47, 57.78]
	]
	],
	['interchange_d', 'Belorusskaya', [
		[-47, 51.84], [-47, 57.78]
	]
	],
	['interchange', 'Mendeleyevskaya-Novoslobodskaya', [
		[-26, 65.36], [-26, 70]
	]
	],
	['interchange_d', 'Mendeleyevskaya-Novoslobodskaya', [
		[-26, 65.36], [-26, 70]
	]
	],
	['interchange', 'Dostoyevskaya-Suvorovskaya', [
		[4, 69.88], [4, 75]
	]
	],
	['interchange_d', 'Dostoyevskaya-Suvorovskaya', [
		[4, 69.88], [4, 75]
	]
	],
	['interchange', 'Prospekt_Mira', [
		[33, 61.7], [36, 65]
	]
	],
	['interchange_d', 'Prospekt_Mira', [
		[33, 61.7], [36, 65]
	]
	],
	['interchange', 'Komsomolskaya', [
		[55.19, 43], [60, 43]
	]
	],
	['interchange_d', 'Komsomolskaya', [
		[55.19, 43], [60, 43]
	]
	],
	['interchange', 'Kurskaya-Chkalobskaya', [
		[69.03, -11.43], [62.27, -5.73], [62.27, -16.53], [69.03, -11.43]
	]
	],
	['interchange_d', 'Kurskaya-Chkalobskaya', [
		[69.03, -11.43], [62.27, -5.73], [62.27, -16.53], [69.03, -11.43]
	]
	],
	['interchange', 'Taganskaya-Marksistskaya', [
		[60, -35.9], [60, -45], [64, -39], [60, -35.9]
	]
	],
	['interchange_d', 'Taganskaya-Marksistskaya', [
		[60, -35.9], [60, -45], [64, -39], [60, -35.9]
	]
	],
	['interchange', 'Paveletskaya', [
		[39.13, -58], [45, -58]
	]
	],
	['interchange_d', 'Paveletskaya', [
		[39.13, -58], [45, -58]
	]
	],
	['interchange', 'Dobryninskaya-Serpukhovskaya', [
		[19, -67.33], [19, -71]
	]
	],
	['interchange_d', 'Dobryninskaya-Serpukhovskaya', [
		[19, -67.33], [19, -71]
	]
	],
	['interchange', 'Oktyabrskaya', [
		[-11.46, -69.03], [-7.92, -65.45]
	]
	],
	['interchange_d', 'Oktyabrskaya', [
		[-11.46, -69.03], [-7.92, -65.45]
	]
	],
	['interchange', 'Park_Kultury', [
		[-53, -45.68], [-53, -50]
	]
	],
	['interchange_d', 'Park_Kultury', [
		[-53, -45.68], [-53, -50]
	]
	],
	['interchange', 'Sokolniki', [
		[76.37, 59.36], [76.37, 65.67]
	]
	],
	['interchange_d', 'Sokolniki', [
		[76.37, 59.36], [76.37, 65.67]
	]
	],
	['interchange', 'Turgenevskaya-Chistye_Prudy-Sretensky_Bulvar', [
		[31, 24], [34, 19], [31, 14.32], [31, 24]
	]
	],
	['interchange_d', 'Turgenevskaya-Chistye_Prudy-Sretensky_Bulvar', [
		[31, 24], [34, 19], [31, 14.32], [31, 24]
	]
	],
	['interchange', 'Kuznetsky_Most-Lubyanka', [
		[11.5, 20.5], [11.5, 14.5]
	]
	],
	['interchange_d', 'Kuznetsky_Most-Lubyanka', [
		[11.5, 20.5], [11.5, 14.5]
	]
	],
	['interchange', 'Okhotny_Ryad-Teatralnaya-Ploshcha_Pevolyutsi', [
		[-4, -1], [1, -6], [6, -11]
	]
	],
	['interchange_d', 'Okhotny_Ryad-Teatralnaya-Ploshcha_Pevolyutsi', [
		[-4, -1], [1, -6], [6, -11]
	]
	],
	['interchange', 'Biblioteka_Imeni_Lenina-Arbatskaya-Alexandrovsky_Sad-Borovitskaya', [
		[-14, -11], [-19, -6], [-24, -11], [-14, -11], [-19, -16], [-24, -11]
	]
	],
	['interchange_d', 'Biblioteka_Imeni_Lenina-Arbatskaya-Alexandrovsky_Sad-Borovitskaya', [
		[-14, -11], [-19, -6], [-24, -11], [-14, -11], [-19, -16], [-24, -11]
	]
	],
	['interchange', 'Kropotkinskaya-Volkhonka', [
		[-29.83, -26.83], [-29.83, -34.29]
	]
	],
	['interchange_d', 'Kropotkinskaya-Volkhonka', [
		[-29.83, -26.83], [-29.83, -34.29]
	]
	],
	['interchange', 'Prospekt_Vernadskogo', [
		[-110, -107.5], [-110, -100.95]
	]
	],
	['interchange_d', 'Prospekt_Vernadskogo', [
		[-110, -107.5], [-110, -100.95]
	]
	],
	['interchange', 'Dinamo-Petrovsky_Park', [
		[-56.7, 67.3], [-52.85, 71.15]
	]
	],
	['interchange_d', 'Dinamo-Petrovsky_Park', [
		[-56.7, 67.3], [-52.85, 71.15]
	]
	],
	['interchange', 'Tverskaya-Pushkinskaya-Chekhovskaya', [
		[-29, 24], [-18.55, 24], [-23.5, 29], [-29, 24]
	]
	],
	['interchange_d', 'Tverskaya-Pushkinskaya-Chekhovskaya', [
		[-29, 24], [-18.55, 24], [-23.5, 29], [-29, 24]
	]
	],
	['interchange', 'Tretyakovskaya-Novokuznetskaya', [
		[23.10, -33.98], [18.14, -39]
	]
	],
	['interchange_d', 'Tretyakovskaya-Novokuznetskaya', [
		[23.10, -33.98], [18.14, -39]
	]
	],
	['interchange', 'Krasnogvardeyskaya-Zyablikovo', [
		[81, -160], [84, -163]
	]
	],
	['interchange_d', 'Krasnogvardeyskaya-Zyablikovo', [
		[81, -160], [84, -163]
	]
	],
	['interchange', 'Kuntsevskaya', [
		[-159, 34], [-152.2, 34]
	]
	],
	['interchange_d', 'Kuntsevskaya', [
		[-159, 34], [-152.2, 34]
	]
	],
	['interchange', 'Smolenskaya-Plyushchikha', [
		[-42, -16], [-42, -22.55]
	]
	],
	['interchange_d', 'Smolenskaya-Plyushchikha', [
		[-42, -16], [-42, -22.55]
	]
	],
	['interchange', 'Elektrozavodskaya', [
		[80, 12], [80, 19]
	]
	],
	['interchange_d', 'Elektrozavodskaya', [
		[80, 12], [80, 19]
	]
	],
	['interchange', 'Vystavochnaya-Delovoy_Tsentr', [
		[-97, 11], [-104, 11]
	]
	],
	['interchange_d', 'Vystavochnaya-Delovoy_Tsentr', [
		[-97, 11], [-104, 11]
	]
	],
	['interchange', 'Rizhskaya', [
		[36, 77], [41, 82]
	]
	],
	['interchange_d', 'Rizhskaya', [
		[36, 77], [41, 82]
	]
	],
	['interchange', 'Kaluzhskaya', [
		[-44, -133], [-48, -133]
	]
	],
	['interchange_d', 'Kaluzhskaya', [
		[-44, -133], [-48, -133]
	]
	],
	['interchange', 'Novoyasenevskaya-Bittsevsky_Park', [
		[-44, -168], [-40, -168]
	]
	],
	['interchange_d', 'Novoyasenevskaya-Bittsevsky_Park', [
		[-44, -168], [-40, -168]
	]
	],
	['interchange', 'Polezhaevskaya-Khoroshyobskaya', [
		[-80, 50.54], [-80, 44]
	]
	],
	['interchange_d', 'Polezhaevskaya-Khoroshyobskaya', [
		[-80, 50.54], [-80, 44]
	]
	],
	['interchange', 'Proletarskaya-Krestyanskaya_Zastava', [
		[80, -65], [84, -59.83]
	]
	],
	['interchange_d', 'Proletarskaya-Krestyanskaya_Zastava', [
		[80, -65], [84, -59.83]
	]
	],
	['interchange', 'Tekstilshchiki', [
		[103.31, -80], [106.62, -76]
	]
	],
	['interchange_d', 'Tekstilshchiki', [
		[103.31, -80], [106.62, -76]
	]
	],
	['interchange', 'Lermontovsky_Prospekt-Kosino', [
		[147, -106], [156.5, -106]
	]
	],
	['interchange_d', 'Lermontovsky_Prospekt-Kosino', [
		[147, -106], [156.5, -106]
	]
	],
	['interchange', 'Michurinsky_Prospekt', [
		[-120, -58], [-113, -58]
	]
	],
	['interchange_d', 'Michurinsky_Prospekt', [
		[-120, -58], [-113, -58]
	]
	],
	['interchange', 'Rimskaya-Ploshchad_Ilyicha', [
		[84, -44.92], [90, -39]
	]
	],
	['interchange_d', 'Rimskaya-Ploshchad_Ilyicha', [
		[84, -44.92], [90, -39]
	]
	],
	['interchange', 'Aviamotornaya', [
		[99.22, -30], [106, -30]
	]
	],
	['interchange_d', 'Aviamotornaya', [
		[99.22, -30], [106, -30]
	]
	],
	['interchange', 'Savyolovskaya-Nizhnyaya_Maslovka', [
		[-29, 82], [-35, 82]
	]
	],
	['interchange_d', 'Savyolovskaya-Nizhnyaya_Maslovka', [
		[-29, 82], [-35, 82]
	]
	],
	['interchange', 'Tsvetnoy_Bulvar-Trubnaya', [
		[-4, 43.5], [4.17, 43.5]
	]
	],
	['interchange_d', 'Tsvetnoy_Bulvar-Trubnaya', [
		[-4, 43.5], [4.17, 43.5]
	]
	],
	['interchange', 'Sevastopolskaya-Kakhovskaya', [
		[16, -133], [20, -135]
	]
	],
	['interchange_d', 'Sevastopolskaya-Kakhovskaya', [
		[16, -133], [20, -135]
	]
	],
	['interchange', 'Bulvar_Dmitriya_Donskogo-Ulitsa_Starokachalovskaya', [
		[-12, -168], [-16, -168]
	]
	],
	['interchange_d', 'Bulvar_Dmitriya_Donskogo-Ulitsa_Starokachalovskaya', [
		[-12, -168], [-16, -168]
	]
	],
	['interchange', 'Marina_Roshcha', [
		[1, 87], [6, 82]
	]
	],
	['interchange_d', 'Marina_Roshcha', [
		[1, 87], [6, 82]
	]
	],
	['interchange', 'Pechatniki-Yozhnoportovaya', [
		[96.83, -87.83], [93, -92.46]
	]
	],
	['interchange_d', 'Pechatniki-Yozhnoportovaya', [
		[96.83, -87.83], [93, -92.46]
	]
//
	],
	['mck_interchange_d', 'Okruzhnaya', [
		[-24, 117.57], [-30, 113]
	]
	],
	['mck_interchange_d', 'Voykovskaya-Baltiiskaya', [
		[-82, 92], [-82, 83.4]
	]
	],
	['mck_interchange_d', 'Oktyabrskoye_Pole-Panfilovskaya', [
		[-98.3, 68.48], [-93, 71]
	]
	],
	['mck_interchange_d', 'Khoroshyobskaya-Polezhaevskaya', [
		[-107.2, 48], [-81, 48]
	]
	],
	['mck_interchange_d', 'Shelepikha', [
		[-116, 28], [-113.6, 28]
	]
	],
	['mck_interchange_d', 'Delovoy_Tsentr-Mezhdunarodnaya', [
		[-115.2, 20], [-112, 21]
	]
	],
	['mck_interchange_d', 'Kutuzovskaya', [
		[-120, 3], [-116.9, 5]
	]
	],
	['mck_interchange_d', 'Sportivnaya-Luzhniki', [
		[-90, -87], [-81.4, -84]
	]
	],
	['mck_interchange_d', 'Ploshad_Gagarina-Leninsky_Prospekt', [
		[-49, -106.2], [-43.04, -102]
	]
	],
	['mck_interchange_d', 'Avtozavodskaya', [
		[72, -92.2], [68, -90]
	]
	],
	['mck_interchange_d', 'Dubrovka', [
		[84, -72], [83.4, -82]
	]
	],
	['mck_interchange_d', 'Shosse_Entuziastov', [
		[109, -20.45], [115.7, -17]
	]
	],
	['mck_interchange_d', 'Izmaylovo-Partizanskaya', [
		[106.7, 48], [113.45, 45.45]
	]
	],
	['mck_interchange_d', 'Lokomotiv-Cherkizovskaya', [
		[94.2, 69.4], [89.16, 72.15]
	]
	],
	['mck_interchange_d', 'Bulvar_Rokossovskogo', [
		[102, 85], [87.2, 78]
	]
	],
	['mck_interchange_d', 'Botanichesky_Sad', [
		[42.6, 109], [36, 106]
	]
	],
	['mck_interchange_d', 'Vladykino', [
		[-11, 122], [-11, 116.4]
	]
	]
];
var MLEGEND = [
	['.Latitude', 'legend_border', [
		[-170, -185], [150, -185], [150, -220], [-170, -220], [-170, -185]
	]
	],
	['r1', 'r1_legend', [
		[-160, -190], [-140, -190]
	], 'Сокольническая линия (красная)', [-140, -190]
	],
	['r2', 'r2_legend', [
		[-160, -194], [-140, -194]
	], 'Замоскворецкая линия (зелёная)', [-140, -194]
	],
	['r3', 'r3_legend', [
		[-160, -198], [-140, -198]
	], 'Арбатско-Покровская линия (синяя)', [-140, -198]
	],
	['r4', 'r4_legend', [
		[-160, -202], [-140, -202]
	], 'Филёвская линия (голубая)', [-140, -202]
	],
	['rTPK', 'rTPK_legend', [
		[-160, -210], [-140, -210]
	], 'Третий пересадочный контур', [-140, -210]
	],
	['r5', 'r5_legend', [
		[-60, -190], [-40, -190]
	], 'Кольцевая линия (коричневая)', [-40, -190]
	],
	['r6', 'r6_legend', [
		[-60, -194], [-40, -194]
	], 'Калужско-Рижская линия (оранжевая)', [-40, -194]
	],
	['r7', 'r7_legend', [
		[-60, -198], [-40, -198]
	], 'Таганско-Краснопресненская линия (фиолетовая)', [-40, -198]
	],
	['r8', 'r8_legend', [
		[-60, -202], [-40, -202]
	], 'Калининская линия (жёлтая)', [-40, -202]
	],
	['r8_ext', 'r7_legend', [
		[-60, -206], [-40, -206]
	], 'Калининско-Солнцевская линия', [-40, -206]
	],
	['rKOZH', 'rKOZH_legend', [
		[-60, -210], [-40, -210]
	], 'Кожуховская линия', [-40, -210]
	],
	['r9', 'r9_legend', [
		[60, -190], [40, -190]
	], 'Серпуховско-Тимирязевская линия (серая)', [60, -190]
	],
	['r10', 'r10_legend', [
		[60, -194], [40, -194]
	], 'Люблинско-Дмитровская линия (салатовая)', [60, -194]
	],
	['r11', 'r11_legend', [
		[60, -198], [40, -198]
	], 'Каховская линия (бирюзовая)', [60, -198]
	],
	['r12', 'r12_legend', [
		[60, -202], [40, -202]
	], 'Бутовская линия (серо-голубая)', [60, -202]
	],
	['monorail_legend', 'mn_legend', [
		[60, -210], [40, -210]
	], 'Московский монорельс', [60, -210]
	]
];
var MLABEL = [
	['moskva_canal_label', 'mc', [], 'Канал имени Москвы', [-97, 111]],
	['moskva_river_label', 'mr', [], 'Москва-река', [111, -147]],
	['yauza_river_label', 'yr', [], 'Яуза', [59, 99]],
	['sheremetyevo_express_line_label', 'sheremetyevo_express', [], 'Шереметьево', [-32, 153]],
	['sheremetyevo_express_line_d_label', 'sheremetyevo_express', [], 'Белорусский', [-51, 55]],
	['vnukovo_express_line_label', 'vnukovo_express', [], 'Внуково', [-160, -121]],
	['vnukovo_express_line_d_label', 'vnukovo_express', [], 'Киевский', [-75, -20.1]],
	['domodedovo_express_line_label', 'domodedovo_express', [], 'Павелецкий', [51, -61]],
	['domodedovo_express_line_d_label', 'domodedovo_express', [], 'Домодедово', [51, -179]],
	['monorail_label', 'mn', [], 'M1', [-26, 101]]
];
var MSTATIONS = [
	['s1', 'Bulvar_Rokossovskogo', [[102, 85]], 'Бульвар Рокоссовского', null, 1],
	['s1', 'Cherkizovskaya', [[89.16, 72.15]], 'Черкизовская', null, 1],
	['s1', 'Preobrazhenskaya_Ploshchad', [[84.31, 67.31]], 'Преображенская площадь', null, 1],
	['s1_1', 'Sokolniki', [[76.37, 59.36]], 'Сокольники', null, 1],
	['s1', 'Krasnoselskaya', [[68.52, 51.52]], 'Красносельская', null, 1],
	['s1_1', 'Komsomolskaya', [[60, 43]], 'Комсомольская', null, 1],
	['s1', 'Krasniye_Vorota', [[48.89, 31.89]], 'Красные ворота', null, 1],
	['s1_1', 'Chistye_Prudy', [[34, 19]], 'Чистые пруды', null, 1],
	['s1_2', 'Lubyanka', [[11.5, 14.5]], 'Лубянка', null, 1],
	['s1_1', 'Okhotny_Ryad', [[-4, -1]], 'Охотный ряд', null, 1],
	['s1_4', 'Biblioteka_Imeni_Lenina', [[-14, -11]], 'Библиотека имени Ленина', null, 1],
	['s1_1', 'Kropotkinskaya', [[-29.83, -26.83]], 'Кропоткинская', null, 1],
	['s1_2', 'Park_Kultury', [[-53, -50]], 'Парк Культуры', null, 1],
	['s1', 'Frunzenskaya', [[-76.66, -73.66]], 'Фрунзенская', null, 1],
	['s1', 'Sportivnaya', [[-90, -87]], 'Спортивная', null, 1],
	['s1', 'Vorobyovy_Gory', [[-97, -94]], 'Воробьёвы горы', null, 1],
	['s1', 'Universitet', [[-104, -101]], 'Университет', null, 1],
	['s1_2', 'Prospekt_Vernadskogo', [[-110, -107.5]], 'Проспект Вернадского', null, 1],
	['s1', 'Yugo-Zapadnaya', [[-116, -113.5]], 'Юго-Западная', null, 1],
	['s1', 'Troparyovo', [[-125, -123]], 'Тропарёво', null, 1],
	['s1', 'Rumyantsevo', [[-132.5, -131]], 'Румянцево', null, 1],
	['s1', 'Salaryevo', [[-141, -140]], 'Саларьево', null, 1],
//
	['s2', 'Ulitsa_Dybenko', [[-92, 122]], 'Улица Дыбенко', null, 1],
	['s2', 'Belomorskaya', [[-92, 114]], 'Беломорская', null, 1],
	['s2', 'Rechnoy_Vokzal', [[-92, 107]], 'Речной вокзал', null, 1],
	['s2', 'Vodny_Stadion', [[-89, 99.07]], 'Водный стадион', null, 1],
	['s2', 'Voykovskaya', [[-82, 92]], 'Войковская', null, 1],
	['s2', 'Sokol', [[-70, 80.36]], 'Сокол', null, 1],
	['s2_4', 'Aeroport', [[-64, 74.46]], 'Аэропорт', null, 1],
	['s2_2', 'Dinamo', [[-56.7, 67.3]], 'Динамо', null, 1],
	['s2_1', 'Belorusskaya', [[-47, 57.78]], 'Белорусская', null, 1],
	['s2', 'Mayakovskaya', [[-31, 38]], 'Маяковская', null, 1],
	['s2_2', 'Tverskaya', [[-29, 24]], 'Тверская', null, 1],
	['s2_1', 'Teatralnaya', [[1, -6]], 'Театральная', null, 1],
	['s2_2', 'Novokuznetskaya', [[23.10, -33.98]], 'Новокузнецкая', null, 1],
	['s2_3', 'Paveletskaya', [[45, -58]], 'Павелецкая', null, 1],
	['s2_4', 'Avtozavodskaya', [[68, -90]], 'Автозаводская', null, 1],
	['s2_4', 'Tekhnopark', [[68, -104]], 'Технопарк', null, 1],
	['s2_4', 'Kolomenskaya', [[68, -113]], 'Коломенская', null, 1],
	['s2_5', 'Kashirskaya', [[68, -129]], 'Каширская', null, 1],
	['s2_4', 'Kantemirovskaya', [[68, -137]], 'Кантемировская', null, 1],
	['s2_4', 'Tsaritsyno', [[68, -143]], 'Царицыно', null, 1],
	['s2_4', 'Orekhovo', [[70.5, -149.34]], 'Орехово', null, 1],
	['s2_4', 'Domodedovskaya', [[76, -155]], 'Домодедовская', null, 1],
	['s2_2', 'Krasnogvardeyskaya', [[81, -160]], 'Красногвардейская', null, 1],
	['s2_6', 'Alma-Atinskaya', [[95, -160]], 'Алма-Атинская', null, 1],
//
	['s3', 'Pyatnitskoye_Shosse', [[-159, 98]], 'Пятницкое шоссе', null, 1],
	['s3', 'Mitino', [[-159, 90]], 'Митино', null, 1],
	['s3', 'Volokolamskaya', [[-159, 82]], 'Волоколамская', null, 1],
	['s3', 'Myakinino', [[-159, 74]], 'Мякинино', null, 1],
	['s3', 'Strogino', [[-159, 66]], 'Строгино', null, 1],
	['s3', 'Krylatskoye', [[-159, 58]], 'Крылатское', null, 1],
	['s3', 'Molodyozhnaya', [[-159, 50]], 'Молодёжная', null, 1],
	['s3_8', 'Kuntsevskaya', [[-159, 34]], 'Кунцевская', null, 1],
	['s3_2', 'Slavyansky_Bulvar', [[-141, -3]], 'Славянский бульвар', null, 1],
	['s3_5', 'Park_Pobedy', [[-120, -16]], 'Парк Победы', null, 1],
	['s3_3', 'Kievskaya', [[-72, -16]], 'Киевская', null, 1],
	['s3_3', 'Smolenskaya', [[-42, -16]], 'Смоленская', null, 1],
	['s3_7', 'Arbatskaya', [[-24, -11]], 'Арбатская', null, 1],
	['s3_4', 'Ploshchad_Revolyutsii', [[6, -11]], 'Площадь Революции', null, 1],
//['s3','Khmelnitskaya',[[36.1,-11]],'Хмельницкая',null,1],
	['s3_7', 'Kurskaya', [[62.27, -5.73]], 'Курская', null, 1],
	['s3', 'Baumanskaya', [[74, 6]], 'Бауманская', null, 1],
	['s3_6', 'Elektrozavodskaya', [[80, 12]], 'Электрозаводская', null, 1],
	['s3', 'Semyonovskaya', [[100.6, 32.6]], 'Семёновская', null, 1],
	['s3', 'Partizanskaya', [[113.45, 45.45]], 'Партизанская', null, 1],
	['s3', 'Izmaylovskaya', [[121.3, 53.3]], 'Измайловская', null, 1],
	['s3', 'Pervomayskaya', [[129.15, 61.15]], 'Первомайская', null, 1],
	['s3', 'Shchyolkovskaya', [[137, 69]], 'Щёлковская', null, 1],
//
	['s4', 'Mezhdunarodnaya', [[-112, 21]], 'Международная', null, 1],
	['s4_4', 'Vystavochnaya', [[-97, 11]], 'Выставочная', null, 1],
	['s4_5', 'Kuntsevskaya', [[-159, 34]], '', null, 1],
	['s4', 'Pionerskaya', [[-152.01, 27.01]], 'Пионерская', null, 1],
	['s4', 'Filyovsky_Park', [[-144.94, 19.94]], 'Филёвский парк', null, 1],
	['s4', 'Bagrationovskaya', [[-137.88, 12.88]], 'Багратионовская', null, 1],
	['s4', 'Fili', [[-131.08, 6.08]], 'Фили', null, 1],
	['s4_1', 'Kutuzovskaya', [[-120, 3]], 'Кутузовская', null, 1],
	['s4_1', 'Studencheskaya', [[-93, -3]], 'Студенческая', null, 1],
	['s4_2', 'Kievskaya', [[-72, -6]], '', null, 1],
	['s4_6', 'Smolenskaya', [[-52.85, -2]], 'Смоленская-2', null, 1],
	['s4_3', 'Arbatskaya', [[-32.7, -2]], 'Арбатская-2', null, 1],
	['s4_2', 'Alexandrovsky_Sad', [[-19, -6]], 'Александровский сад', null, 1],
//
	['s5', 'Komsomolskaya', [[55.19, 43]], '', null, 1],
	['s5', 'Kurskaya', [[69.03, -11.43]], 'Курская', null, 1],
	['s5', 'Taganskaya', [[60, -35.98]], 'Таганская', null, 1],
	['s5', 'Paveletskaya', [[39.13, -58]], '', null, 1],
	['s5', 'Dobryninskaya', [[19, -67.33]], 'Добрынинская', null, 1],
	['s5', 'Oktyabrskaya', [[-11.46, -69.03]], '', null, 1],
	['s5_1', 'Park_Kultury', [[-53, -45.68]], '', null, 1],
	['s5', 'Kievskaya', [[-69.09, -11]], '', null, 1],
	['s5', 'Rossyskaya', [[-69.38, 9.24]], 'Российская', null, 1],
	['s5_2', 'Krasnopresnenskaya', [[-64.8, 26.41]], 'Краснопресненская', null, 1],
	['s5_2', 'Belorusskaya', [[-47, 51.84]], 'Белорусская', null, 1],
	['s5_2', 'Novoslobodskaya', [[-26, 65]], 'Новослободская', null, 1],
	['s5', 'Suvorovskaya', [[4, 69.88]], 'Суворовская', null, 1],
	['s5', 'Prospekt_Mira', [[33, 61.7]], '', null, 1],
//
	['s6', 'Mytishchi', [[36, 145]], 'Мытищи', null, 1],
	['s6', 'Chelobityevo', [[36, 137]], 'Челобитьево', null, 1],
	['s6', 'Medvedkovo', [[36, 129]], 'Медведково', null, 1],
	['s6', 'Babushkinskaya', [[36, 121]], 'Бабушкинская', null, 1],
	['s6', 'Sviblovo', [[36, 113]], 'Свиблово', null, 1],
	['s6', 'Botanichesky_Sad', [[36, 106]], 'Ботанический сад', null, 1],
	['s6', 'VDNKh', [[36, 98]], 'ВДНХ', null, 1],
	['s6', 'Alexeyevskaya', [[36, 90]], 'Алексеевская', null, 1],
	['s6_2', 'Rizhskaya', [[36, 77]], 'Рижская', null, 1],
	['s6_2', 'Prospekt_Mira', [[36, 65]], 'Проспект Мира', null, 1],
	['s6_1', 'Sukharevskaya', [[36, 49]], 'Сухаревская', null, 1],
	['s6_2', 'Turgenevskaya', [[31, 24]], 'Тургеневская', null, 1],
	['s6_2', 'Kitay-Gorod', [[31, -16]], 'Китай-город', null, 1],
	['s6_4', 'Tretyakovskaya', [[18.14, -39]], 'Третьяковская', null, 1],
	['s6_3', 'Oktyabrskaya', [[-7.92, -65.45]], 'Октябрьская', null, 1],
	['s6', 'Shabolovskaya', [[-32.89, -90.83]], 'Шаболовская', null, 1],
	['s6', 'Leninsky_Prospekt', [[-43.04, -102]], 'Ленинский проспект', null, 1],
	['s6', 'Akademicheskaya', [[-44, -112]], 'Академическая', null, 1],
	['s6', 'Profsoyuznaya', [[-44, -119]], 'Профсоюзная', null, 1],
	['s6', 'Noviye_Cheryomushki', [[-44, -126]], 'Новые Черёмушки', null, 1],
	['s6_7', 'Kaluzhskaya', [[-44, -133]], 'Калужская', null, 1],
	['s6', 'Belyayevo', [[-44, -140]], 'Беляево', null, 1],
	['s6', 'Konkovo', [[-44, -147]], 'Коньково', null, 1],
	['s6', 'Tyoplyi_Stan', [[-44, -154]], 'Тёплый Стан', null, 1],
	['s6', 'Yasenevo', [[-44, -161]], 'Ясенево', null, 1],
	['s6_5', 'Novoyasenevskaya', [[-44, -168]], 'Новоясеневская', null, 1],
//
	['s7', 'Planernaya', [[-105, 99]], 'Планерная', null, 1],
	['s7', 'Skhodnenskaya', [[-105, 91]], 'Сходненская', null, 1],
	['s7', 'Tushinskaya', [[-105, 84]], 'Тушинская', null, 1],
	['s7', 'Spartak', [[-105, 78]], 'Спартак', null, 1],
	['s7', 'Shchukinskaya', [[-102.7, 72.65]], 'Щукинская', null, 1],
	['s7', 'Oktyabrskoye_Pole', [[-98.3, 68.48]], 'Октябрьское поле', null, 1],
	['s7_1', 'Polezhaevskaya', [[-80, 50.54]], 'Полежаевская', null, 1],
	['s7_4', 'Begovaya', [[-72.15, 42.87]], 'Беговая', null, 1],
	['s7_4', 'Ulitsa_1905_Goda', [[-65.61, 36.48]], 'Улица 1905 года', null, 1],
	['s7_2', 'Barrikadnaya', [[-60.34, 31.34]], 'Баррикадная', null, 1],
	['s7_2', 'Pushkinskaya', [[-23.5, 29]], 'Пушкинская', null, 1],
	['s7_1', 'Kuznetsky_Most', [[11.5, 20.5]], 'Кузнецкий мост', null, 1],
	['s7_5', 'Kitay-Gorod', [[31, -16]], '', null, 1],
	['s7_2', 'Taganskaya', [[60, -45]], '', null, 1],
	['s7_6', 'Proletarskaya', [[80, -65]], 'Пролетарская', null, 1],
	['s7_4', 'Volgogradsky_Prospekt', [[92, -77]], 'Волгоградский проспект', null, 1],
	['s7_3', 'Tekstilshchiki', [[103.31, -80]], 'Текстильщики', null, 1],
	['s7_7', 'Kuzminki', [[126, -80]], 'Кузьминки', null, 1],
	['s7_4', 'Ryazanskiy_Prospekt', [[142, -80]], 'Рязанский проспект', null, 1],
	['s7', 'Vykhino', [[160, -90]], 'Выхино', null, 1],
	['s7_1', 'Lermontovsky_Prospekt', [[147, -106]], 'Лермонтовский проспект', null, 1],
	['s7', 'Zhulebino', [[136, -117]], 'Жулебино', null, 1],
	['s7_8', 'Kotelniki', [[133, -126]], 'Котельники', null, 1],
//
	['s8', 'Rasskazovka', [[-162, -105]], 'Рассказовка', null, 1],
	['s8', 'Novoperedelkino', [[-154.62, -97.43]], 'Новопеределкино', null, 1],
	['s8', 'Borovskoye_Shosse', [[-146.77, -89.38]], 'Боровское шоссе', null, 1],
	['s8', 'Solntsevo', [[-138.92, -81.33]], 'Солнцево', null, 1],
	['s8', 'Teryoshkovo', [[-131.08, -73.28]], 'Говорово', null, 1],
	['s8', 'Ochakovo', [[-124.53, -66.57]], 'Очаково', null, 1],
	['s8_2', 'Michurinsky_Prospekt', [[-120, -58]], '', null, 1],
	['s8', 'Ramenki', [[-120, -44]], 'Раменки', null, 1],
	['s8', 'Lomonosobsky_Prospekt', [[-120, -35]], 'Ломоносовский проспект', null, 1],
	['s8', 'Minskaya', [[-120, -25]], 'Минская', null, 1],
	['s8_6', 'Park_Pobedy', [[-120, -16]], '', null, 1],
	['s8_3', 'Delovoy_Tsentr', [[-104, 11]], 'Деловой центр', null, 1],
	['s8_1', 'Kutuzovsky_Prospekt', [[-69.38, 3.63]], 'Дорогомиловская', null, 1],
	['s8_4', 'Plyushchikha', [[-42, -22.55]], 'Плющиха', null, 1],
	['s8_1', 'Volkhonka', [[-29.83, -34.29]], 'Волхонка', null, 1],
	['s8_6', 'Tretyakovskaya', [[18.14, -39]], '', null, 1],
	['s8_2', 'Marksistskaya', [[64, -39]], 'Марксистская', null, 1],
	['s8_1', 'Ploshchad_Ilicha', [[90, -39]], 'Площадь Ильича', null, 1],
	['s8_1', 'Aviamotornaya', [[99.22, -30]], '', null, 1],
	['s8', 'Shosse_Entuziastov', [[109, -20.45]], 'Шоссе Энтузиастов', null, 1],
	['s8', 'Perovo', [[120, -9.64]], 'Перово', null, 1],
	['s8', 'Novogireevo', [[128, -1.82]], 'Новогиреево', null, 1],
	['s8', 'Novokosino', [[136, 6]], 'Новокосино', null, 1],
//
	['s9', 'Altufyevo', [[0, 146]], 'Алтуфьево', null, 1],
	['s9', 'Bibirevo', [[0, 137]], 'Бибирево', null, 1],
	['s9', 'Otradnoye', [[-3, 130]], 'Отрадное', null, 1],
	['s9', 'Vladykino', [[-11, 122]], 'Владыкино', null, 1],
	['s9_2', 'Petrovsko-Razumovskaya', [[-21.52, 111.48]], 'Петровско-Разумовская', null, 1],
	['s9_4', 'Timiryazevskaya', [[-29, 101]], 'Тимирязевская', null, 1],
	['s9', 'Dmitrovskaya', [[-29, 91]], 'Дмитровская', null, 1],
	['s9_3', 'Savyolovskaya', [[-29, 82]], 'Савёловская', null, 1],
	['s9_5', 'Mendeleyevskaya', [[-26, 70]], 'Менделеевская', null, 1],
	['s9_1', 'Tsvetnoy_Bulvar', [[-4, 43.5]], 'Цветной бульвар', null, 1],
	['s9_2', 'Chekhovskaya', [[-18.55, 24]], 'Чеховская', null, 1],
	['s9_3', 'Borovitskaya', [[-19, -16]], 'Боровицкая', null, 1],
	['s9_4', 'Polyanka', [[6, -47.69]], 'Полянка', null, 1],
	['s9_2', 'Serpukhovskaya', [[19, -71]], 'Серпуховская', null, 1],
	['s9', 'Tulskaya', [[19, -99]], 'Тульская', null, 1],
	['s9', 'Nagatinskaya', [[19, -117]], 'Нагатинская', null, 1],
	['s9', 'Nagornaya', [[19, -123]], 'Нагорная', null, 1],
	['s9', 'Nakhimovsky_Prospekt', [[18.8, -129]], 'Нахимовский проспект', null, 1],
	['s9_6', 'Sevastopolskaya', [[16, -133]], 'Севастопольская', null, 1],
	['s9', 'Chertanovskaya', [[11.2, -139]], 'Чертановская', null, 1],
	['s9', 'Yuzhnaya', [[6.3, -145]], 'Южная', null, 1],
	['s9', 'Prazhskaya', [[1.5, -151]], 'Пражская', null, 1],
	['s9', 'Ulitsa_Akademika_Yangelya', [[-3.3, -157]], 'Улица Академика Янгеля', null, 1],
	['s9', 'Annino', [[-8, -163]], 'Аннино', null, 1],
	['s9_2', 'Bulvar_Dmitriya_Donskogo', [[-12, -168]], 'Бульвар Дмитрия Донского', null, 1],
//
	['s10', 'Dmitrovskoye_Shosse', [[-24, 146]], 'Дмитровское шоссе', null, 1],
	['s10', 'Ulitsa_800_Letiya_Moskvy', [[-24, 139]], 'Улица 800-летия Москвы', null, 1],
	['s10', 'Seligerskaya', [[-24, 132]], 'Селигерская', null, 1],
	['s10', 'Verkhniye_Likhobory', [[-24, 125]], 'Верхние Лихоборы', null, 1],
	['s10', 'Okruzhnaya', [[-24, 117.57]], 'Окружная', null, 1],
	['s10_4', 'Petrovsko-Razumovskaya', [[-21.52, 111.48]], '', null, 1],
	['s10_1', 'Fonvizinskaya', [[-13.87, 103.16]], 'Фонвизинская', null, 1],
	['s10_1', 'Butyrskaya', [[-6.02, 94.63]], 'Бутырская', null, 1],
	['s10_2', 'Marina_Roshcha', [[1, 87]], 'Марьина Роща', null, 1],
	['s10_2', 'Dostoyevskaya', [[4, 75]], 'Достоевская', null, 1],
	['s10_2', 'Trubnaya', [[4.17, 43.5]], 'Трубная', null, 1],
	['s10_2', 'Sretensky_Bulvar', [[31, 14.32]], 'Сретенский бульвар', null, 1],
	['s10_2', 'Chkalovskaya', [[62.27, -16.53]], 'Чкаловская', null, 1],
	['s10_2', 'Rimskaya', [[84, -44.92]], 'Римская', null, 1],
	['s10_2', 'Krestyanskaya_Zastava', [[84, -59.83]], 'Крестьянская застава', null, 1],
	['s10', 'Dubrovka', [[84, -72]], 'Дубровка', null, 1],
	['s10', 'Kozhukhovskaya', [[92, -83]], 'Кожуховская', null, 1],
	['s10_2', 'Pechatniki', [[96.83, -87.83]], 'Печатники', null, 1],
	['s10', 'Volzhskaya', [[108, -106]], 'Волжская', null, 1],
	['s10', 'Lyublino', [[99, -118]], 'Люблино', null, 1],
	['s10_1', 'Bratislavskaya', [[91, -126]], 'Братиславская', null, 1],
	['s10_1', 'Marino', [[84, -137]], 'Марьино', null, 1],
	['s10_1', 'Borisovo', [[84, -145]], 'Борисово', null, 1],
	['s10_1', 'Shipilovskaya', [[84, -153]], 'Шипиловская', null, 1],
	['s10_3', 'Zyablikovo', [[84, -163]], 'Зябликово', null, 1],
//
	['s11_1', 'Kakhovskaya', [[20, -135]], 'Каховская', null, 1],
	['s11', 'Varshavskaya', [[42, -135]], 'Варшавская', null, 1],
	['s11_2', 'Kashirskaya', [[68, -129]], '', null, 1],
//
	['s12_4', 'Bittsevsky_Park', [[-40, -168]], 'Битцевский парк', null, 1],
	['s12_1', 'Lesoparkovaya', [[-28, -168]], 'Лесопарковая', null, 1],
	['s12_5', 'Ulitsa_Starokachalovskaya', [[-16, -168]], 'Улица Старокачаловская', null, 1],
	['s12_2', 'Ulitsa_Skobelevskaya', [[-28, -179]], 'Улица Скобелевская', null, 1],
	['s12_1', 'Bulvar_Admirala_Ushakova', [[-45, -179]], 'Б-р Адм Ушакова', null, 1],
	['s12', 'Ulitsa_Gorchakova', [[-66, -179]], 'Улица Горчакова', null, 1],
	['s12_1', 'Buninskaya_Alleya', [[-87, -179]], 'Бунинская аллея', null, 1],
	['s12', 'Potapovo', [[-108, -179]], 'Потапово', null, 1],
	['s12_1', 'Chechyorsky_Proezd', [[-129, -179]], 'Чечёрский проезд', null, 1],
	['s12', 'Novokuryanovo', [[-150, -179]], 'Новокурьяново', null, 1],
//
	['sTPK_3', 'Kuntsevskaya', [[-152.2, 34]], 'Можайская', null, 1],
	['sTPK_8', 'Terekhovo', [[-137, 40]], 'Терехово', null, 1],
	['sTPK_6', 'Mnyovniki', [[-121, 40]], 'Н.Мнёвники', null, 1],
	['sTPK', 'Narodnoye_Opolcheniye', [[-105, 40]], 'Улица Н.Ополчения', null, 1],
	['sTPK_5', 'Delovoy_Tsentr', [[-104, 11]], '', null, 1],
	['sTPK_2', 'Shelepikha', [[-116, 28]], 'Шелепиха', null, 1],
	['sTPK_9', 'Khoroshyobskaya', [[-80, 44]], 'Хорошёвская', null, 1],
	['sTPK_1', 'Khodynskoye_Pole', [[-67.5, 56.5]], 'ЦСКА', null, 1],
	['sTPK_3', 'Petrovsky_Park', [[-52.85, 71.15]], 'Петровский Парк', null, 1],
	['sTPK_14', 'Nizhnyaya_Maslovka', [[-35, 82]], 'Н.Масловка', null, 1],
	['sTPK_11', 'Marina_Roshcha', [[6, 82]], 'Шереметьевская', null, 1],
	['sTPK_4', 'Rzhevskaya', [[41, 82]], 'Ржевская', null, 1],
	['sTPK_9', 'Sokolniki', [[76.37, 65.67]], 'Стромынка', null, 1],
	['sTPK_3', 'Elektrozavodskaya', [[80, 19]], 'Рубцовская', null, 1],
	['sTPK_7', 'Lefortovo', [[98.63, -1.76]], 'Лефортово', null, 1],
	['sTPK_3', 'Aviamotornaya', [[106, -30]], 'Авиамоторная', null, 1],
	['sTPK_3', 'Nizhegorodskaya_Ulitsa', [[122.18, -46.18]], 'Нижегородская улица', null, 1],
	['sTPK_3', 'Tekstilshchiki', [[106.62, -76]], '', null, 1],
	['sTPK', 'Yozhnoportovaya', [[93, -92.46]], 'Южнопортовая', null, 1],
	['sTPK_7', 'Nagatinsky_Zaton', [[77.5, -115]], 'Кленовый бульвар', null, 1],
	['sTPK_10', 'Zyuzino', [[-12, -133]], 'Зюзино', null, 1],
	['sTPK_13', 'Vorontsovskaya', [[-48, -133]], 'Воронцовская', null, 1],
	['sTPK_1', 'Ulitsa_Hovatorov', [[-78, -118]], 'Улица Новаторов', null, 1],
	['sTPK_3', 'Prospekt_Vernadskogo', [[-110, -100.95]], '', null, 1],
	['sTPK_3', 'Michurinsky_Prospekt', [[-113, -58]], 'Мичуринский проспект', null, 1],
	['sTPK_2', 'Aminyevskoye_Shosse', [[-135.26, -35.74]], 'Аминьевское шоссе', null, 1],
	['sTPK_2', 'Davydkovo', [[-145.73, -25.27]], 'Давыдково', null, 1],
//
	['sTPK_1', 'Ulitsa_Akademika_Oparina', [[-83, -124]], 'Улица Академика Опарина', null, 1],
	['sTPK_1', 'Ulitsa_Generala_Tuleneva', [[-87, -129]], 'Улица Генерала Тюленева', null, 1],
	['sTPK_1', 'Slavyanskiy_Mir', [[-91.2, -134]], 'Славянский мир', null, 1],
	['sTPK_1', 'Mamyri', [[-95.4, -139]], 'Мамыри', null, 1],
	['sTPK_1', 'Kommunarka', [[-99.6, -144]], 'Коммунарка', null, 1],
	['sTPK_1', 'Stolbovo', [[-103.8, -149]], 'Столбово', null, 1],
	['sTPK_1', 'Sosenki', [[-107.8, -154]], 'Сосенки', null, 1],
	['sTPK_1', 'Desna', [[-112, -159]], 'Десна', null, 1],
//
	['sKOZH_3', 'Aviamotornaya', [[106, -30]], '', null, 1],
	['sKOZH_3', 'Nizhegorodskaya_Ulitsa', [[122.18, -46.18]], '', null, 1],
	['sKOZH', 'Okskaya_Ulitsa', [[132.65, -56.65]], 'Окская улица', null, 1],
	['sKOZH', 'Stakhanobskaya_Ulitsa', [[137, -66]], 'Стахановская улица', null, 1],
	['sKOZH_1', 'Ferganskaya_Ulitsa', [[143.11, -91.39]], 'Ферганская улица', null, 1],
	['sKOZH_2', 'Kosino', [[156.5, -106]], 'Косино', null, 1],
	['sKOZH_1', 'Saltykovskaya_Ulitsa', [[165, -123]], 'Салтыковская улица', null, 1],
	['sKOZH_1', 'Kosino-Ukhtomskaya', [[165, -131]], 'Косино-Ухтомская', null, 1],
	['sKOZH_1', 'Nekrasovka', [[165, -138]], 'Некрасовка', null, 1],
//
	['sMono', 'Timiryazevskaya', [[-26, 101]], '', null, 1],
	['sMono', 'Ulitsa_Milashenkova', [[-13, 101]], '', null, 1],
	['sMono', 'Teletsentr', [[1, 101]], '', null, 1],
	['sMono', 'Ulitsa_Akademika_Koroleva', [[17, 101]], '', null, 1],
	['sMono', 'Vystavochny_Tsentr', [[33, 101]], '', null, 1],
	['sMono_1', 'Ulitsa_Sergeya_Eyzenshteyna', [[43, 101]], '', null, 1],
//
	['sMCK', 'Vladykino', [[-11, 116.4]], '', null, 1],
	['sMCK', 'Okruzhnaya', [[-30, 113]], '', null, 1],
	['sMCK', 'Lihobory', [[-44, 108.4]], 'Лихоборы', null, 1],
	['sMCK', 'Koptevo', [[-62.8, 98.6]], 'Коптево', null, 1],
	['sMCK', 'Baltiiskaya', [[-82, 83.4]], 'Балтийская', null, 1],
	['sMCK', 'Streshnevo', [[-87, 78.2]], 'Стрешнево', null, 1],
	['sMCK', 'Panfilovskaya', [[-93, 71]], 'Панфиловская', null, 1],
	['sMCK', 'Zorge', [[-102.7, 56]], 'Зорге', null, 1],
	['sMCK_1', 'Horoshevo', [[-106.6, 48]], 'Хорошёво', null, 1],
	['sMCK', 'Shelepiha', [[-113.6, 28]], 'Шелепиха', null, 1],
	['sMCK_1', 'Delovoy_Tsentr', [[-115.2, 20]], 'Деловой центр', null, 1],
	['sMCK', 'Kutuzovskaya', [[-116.9, 5]], 'Кутузовская', null, 1],
	['sMCK', 'Luzhniki', [[-81.4, -84]], 'Лужники', null, 1],
	['sMCK', 'Ploshad_Gagarina', [[-49, -106.2]], 'Площадь Гагарина', null, 1],
	['sMCK_4', 'Krymskaya', [[-14, -116.2]], 'Крымская', null, 1],
	['sMCK_3', 'Verhnie_Kotly', [[30, -113.1]], 'Верхние Котлы', null, 1],
	['sMCK_2', 'ZIL', [[50, -105.8]], 'ЗИЛ', null, 1],
	['sMCK', 'Avtozavodskaya', [[72, -92.2]], '', null, 1],
	['sMCK', 'Dubrovka', [[83.4, -82]], '', null, 1],
	['sMCK', 'Ugreshskaya', [[101.5, -58]], 'Угрешская', null, 1],
	['sMCK', 'Novohohlovskaya', [[106.6, -48]], 'Новохохловская', null, 1],
	['sMCK', 'Nizhegorodskaya', [[111.5, -35.5]], 'Нижегородская', null, 1],
	['sMCK', 'Delovoy_Tsentr', [[114.3, -25]], 'Андроновка ', null, 1],
	['sMCK', 'Shosse_Entuziastov', [[115.7, -17]], 'Шоссе Энтузиастов', null, 1],
	['sMCK', 'Sokolinaya_Gora', [[116.3, 12]], 'Соколиная гора', null, 1],
	['sMCK_2', 'Izmaylovo', [[106.7, 48]], 'Измайлово', null, 1],
	['sMCK', 'Lokomotiv', [[94.2, 69.4]], 'Локомотив', null, 1],
	['sMCK', 'Bulvar_Rokossovskogo', [[87.2, 78]], '', null, 1],
	['sMCK', 'Izmaylovo', [[74.8, 90]], 'Белокаменная', null, 1],
	['sMCK', 'Rostokino', [[60.6, 100]], 'Ростокино', null, 1],
	['sMCK', 'Botanicheskiy_Sad', [[42.6, 109]], 'Ботанический сад', null, 1]
];
/!*
 * dbCartajs HTML5 SVG vector object map v2.0.3.
 * It uses Proj4js transformations.
 *
 * Source at https://github.com/egaxegax/dbCartajs.git.
 * egax@bk.ru, 2015-2016.
 *!/
var SVG_NS = 'http://www.w3.org/2000/svg';

function dbCartaSvg(cfg) {
	var el, cont, root, vp,
		self = this;
	var extend = function (dst, src) {
		if (!src) {
			src = dst;
			dst = this;
		}
		for (var prop in src)
			if (src[prop] !== undefined)
				dst[prop] = src[prop];
		return dst;
	};
	var attr = function (dst, src) {
		if (!src) {
			src = dst;
			dst = this;
		}
		for (var prop in src)
			if (src[prop]) dst.setAttribute(prop, src[prop]);
		return dst;
	};
	var append = function (parent, name, at) {
		if (!at) {
			at = name;
			name = parent;
			parent = vp || root;
		}
		var el = document.createElementNS(SVG_NS, name);
		if (parent) parent.appendChild(el);
		attr(el, at);
		return el;
	};
	cfg = cfg || {};
	el = document.getElementById(cfg.id);
	cont = document.createElement('div'); // container
	if (el) el.appendChild(cont);
	// root node
	root = append(cont, 'svg', {
		width: cfg.width ? cfg.width : el.offsetWidth,
		height: cfg.height ? cfg.height : el.offsetWidth / 2.0,
		version: '1.1',
		xlmns: SVG_NS
	});
	root.style.backgroundColor = cfg.bg || 'rgb(186,196,205)';
	// child
	vp = append(root, 'g', {
		width: root.getAttribute('width'),
		height: root.getAttribute('height')
	});
	// add props
	extend(this, {
		/!**
		 * Public
		 *!/
		root: root, // svg node
		vp: vp, // g node (rotate, scale, translate)
		extend: extend,
		attr: attr,
		append: append,

		cfg: {
			draggable: cfg.draggable == undefined ? true : cfg.draggable,
			boundbg: cfg.boundbg || 'rgb(90,140,190)',
			sbar: cfg.sbar == undefined ? true : cfg.sbar,
			sbarpos: cfg.sbarpos || 'right'
		},
		/!**
		 * Interval vars
		 *!/
		m: {
			delta: root.getAttribute('width') / 360.0,
			halfX: root.getAttribute('width') / 2.0,
			halfY: root.getAttribute('height') / 2.0,
			rotate: 0,
			scale: 1,
			offset: [0, 0],
			touches: []
		},
		/!*
		 * Proj4 defs
		 *!/
		projlist: function () {
			if ('Proj4js' in window) {
				return {
					0: '+proj=longlat',
					101: '+proj=merc +units=m',
					102: '+proj=mill +units=m',
					201: '+proj=laea +units=m',
					202: '+proj=nsper +units=m +h=40000000',
					203: '+proj=ortho +units=m',
					204: '+proj=moll +units=m'
				}
			}
			return {};
		}(),
		projload: {},
		project: 0,
		/!**
		 * Convert pixels to points.
		 *!/
		canvasXY: function (ev) {
			var node = cont,
				pts = [ev.clientX, ev.clientY];
			if (!/WebKit/.test(navigator.userAgent)) {
				pts[0] += window.pageXOffset;
				pts[1] += window.pageYOffset;
			}
			while (node) {
				pts[0] -= node.offsetLeft - node.scrollLeft;
				pts[1] -= node.offsetTop - node.scrollTop;
				node = node.offsetParent;
			}
			return pts;
		},
		/!**
		 * Return meridians coords.
		 *!/
		createMeridians: function () {
			var lonlat = [];
			var x = -180,
				scale_x = 180;
			while (x <= scale_x) {
				var lon = [];
				var y = -90;
				while (y <= 90) {
					lon.push([x, y]);
					y += (y == -90 || y == 84 ? 6 : 84); // mercator fix
				}
				lonlat.push(lon);
				x += 30;
			}
			var y = -90;
			while (y <= 90) {
				var x = -180,
					prev = [x, y];
				while (x < scale_x) {
					x += 90;
					var lat = [prev, [x, y]],
						prev = [x, y];
					lonlat.push(lat);
				}
				y += 30;
			}
			return lonlat;
		},
		// - transforms ---------------------------------
		/!**
		 * Rotate map on ANGLE in degrees.
		 *!/
		rotateCarta: function (angle) {
			this.m.rotate += angle;
			this.scaleCarta(this.m.scale);
		},
		/!**
		 * Change map scale to SCALE.
		 *!/
		scaleCarta: function (scale) {
			var centerof = this.centerOf();
			var cx = centerof[0] / scale - centerof[0],
				cy = centerof[1] / scale - centerof[1];
			var offx = this.m.offset[0] + cx,
				offy = this.m.offset[1] + cy;
			attr(vp, {
				transform: 'rotate(' + this.m.rotate + ' ' + centerof[0] + ' ' + centerof[1] + ') scale(' + scale + ') translate(' + offx + ',' + offy + ')'
			});
			this.m.scale = scale;
		},
		/!**
		 * Center map by points PTS.
		 *!/
		centerCarta: function (pts) {
			var scale = this.m.scale;
			var centerof = this.centerOf();
			var cx = centerof[0] / scale - centerof[0],
				cy = centerof[1] / scale - centerof[1];
			var offx = pts[0] / scale - this.m.mpts[0],
				offy = pts[1] / scale - this.m.mpts[1];
			var fx = offx + cx,
				fy = offy + cy;
			attr(vp, {
				transform: 'rotate(' + this.m.rotate + ' ' + centerof[0] + ' ' + centerof[1] + ') scale(' + scale + ') translate(' + fx + ',' + fy + ')'
			});
			this.m.offset = [offx, offy];
		},
		/!**
		 * Select obj under mouse cursor like html MAP-AREA.
		 *!/
		doMap: function (ev, at) {
			this.mousemove(ev);
			if (!this.m.pmap) {
				var mattr = {};
				for (var prop in at) { // save current
					mattr[prop] = ev.target.getAttribute(prop);
				}
				if (!mattr['transform']) mattr['transform'] = 'scale(1)';
				attr(ev.target, at); // set new
				this.m.pmap = {
					ev: ev,
					attr: mattr
				};
			}
			;
			this.m.pmap.i = 1; // set counter
		},
		/!**
		 * Append Sphere radii bounds.
		 *!/
		paintBound: function () {
			var centerof = this.centerOf();
			var rx, ry, proj = this.initProj();
			// spherical radii
			switch (String(this.project)) {
				case '201':
					rx = 2.0;
					break;
				case '202':
					rx = Math.sqrt((proj.p15 - 1.0) / (proj.p15 + 1.0));
					break;
				case '203':
					rx = 1.0;
					break;
				case '204':
					ry = 1.4142135623731;
					rx = 2.0 * ry;
					break;
			}
			if (rx) {
				return append('ellipse', {
					cx: centerof[0],
					cy: centerof[1],
					rx: rx * this.m.delta * 180 / Math.PI,
					ry: (ry || rx) * this.m.delta * 180 / Math.PI,
					fill: this.cfg.boundbg
				});
			}
		},
		/!**
		 * Append right bar with scale buttons.
		 *!/
		paintBar: function () {
			if (!this.cfg.sbar) return;
			var sz = this.sizeOf(),
				cw = sz[2],
				ch = sz[3];
			var h = ch / 6,
				w = h / 2,
				tleft = this.cfg.sbarpos == 'left' ? w / 10 : cw - w - w / 10,
				ttop = ch / 2 - h / 2,
				d = w / 10; // + - size
			var cols = 20, // arc col vertex
				anglestep = Math.PI / cols;
			var mx, my; // last pos
			var pts = [];
			// plus round
			for (var i = -6; i <= cols + 6; i++)
				pts.push(mx = (w / 2 * Math.cos(i * anglestep)), my = (-w / 2 * Math.sin(i * anglestep)));
			pts.push(-w / 5, -d / 2);
			pts.push(-d / 2, -d / 2);
			pts.push(-d / 2, -w / 5);
			pts.push(d / 2, -w / 5);
			pts.push(d / 2, -d / 2);
			pts.push(w / 5, -d / 2);
			pts.push(w / 5, d / 2);
			pts.push(d / 2, d / 2);
			pts.push(d / 2, w / 5);
			pts.push(-d / 2, w / 5);
			pts.push(-d / 2, d / 2);
			pts.push(-w / 5, d / 2);
			pts.push(-w / 5, -d / 2);
			pts.push(mx, my);
			// minus round
			for (var i = -6; i <= -6; i++)
				pts.push(-w / 2 * Math.cos(i * anglestep), h / 2 + w / 2 * Math.sin(i * anglestep));
			pts.push(-w / 5, h / 2 - d / 2);
			pts.push(w / 5, h / 2 - d / 2);
			pts.push(w / 5, h / 2 + d / 2);
			pts.push(-w / 5, h / 2 + d / 2);
			pts.push(-w / 5, h / 2 - d / 2);
			for (var i = -6; i <= cols + 6; i++)
				pts.push(mx = (-w / 2 * Math.cos(i * anglestep)), my = (h / 2 + w / 2 * Math.sin(i * anglestep)));
			// home round
			for (var i = 0; i <= cols; i++)
				pts.push(w / 6 * Math.cos(i * 2.0 * anglestep), h / 2 - h / 4 + w / 6 * Math.sin(i * 2.0 * anglestep));
			pts.push(mx, my);
			var dx = tleft + w / 2,
				dy = ttop + h / 4,
				path = 'M ' + pts[0] + ' ' + pts[1] + ' L ' + pts.join(' ') + ' z';

		},
		// - sizes ----------------------------
		sizeOf: function () {
			return [0, 0, root.getAttribute('width'), root.getAttribute('height')];
		},
		centerOf: function () {
			var rect = this.sizeOf();
			return [(rect[0] + rect[2]) / 2.0,
				(rect[1] + rect[3]) / 2.0];
		},
		/!**
		 * Map visible borders in degrees.
		 *!/
		viewsizeOf: function () {
			var rect = this.sizeOf();
			var left = this.fromPoints([rect[0], rect[1]], false),
				leftproj = this.fromPoints([rect[0], rect[1]], !this.isSpherical()),
				right = this.fromPoints([rect[2], rect[3]], false),
				rightproj = this.fromPoints([rect[2], rect[3]], !this.isSpherical());
			var mleft = left[0], mtop = leftproj[1],
				mright = right[0], mbottom = rightproj[1];
			return [mleft, mtop, mright, mbottom];
		},
		viewcenterOf: function () {
			var rect = this.viewsizeOf();
			return [(rect[0] + rect[2]) / 2.0,
				(rect[1] + rect[3]) / 2.0];
		},
		// - checks ------------------------
		/!**
		 * Check click on right bar and do action.
		 *!/
		chkBar: function (pts, doaction) {
			if (!this.cfg.sbar) return;
			var sz = this.sizeOf(),
				cw = sz[2],
				ch = sz[3];
			var h = ch / 6,
				w = h / 2,
				tleft = this.cfg.sbarpos == 'left' ? w / 10 : cw - w - w / 10,
				ttop = ch / 2 - h / 2,
				d = w / 10;
			var mx = pts[0] - tleft,
				my = pts[1] - ttop;
			if (mx > 0 && mx < w && my > 0 && my < h) { // scale
				if (!doaction) return true;
				var zoom = (this.m.scale > 1 ? this.m.scale : 2 - 1 / this.m.scale);
				if (my > h / 2 - w / 6 && my < h / 2 + w / 6) { // home
					zoom = 1;
				} else if (my > 0 && my < h / 2) { // plus
					if (zoom < 50) zoom += 0.1;
				} else if (my > h / 2 && my < h) { // minux
					if (zoom > -18) zoom -= 0.1;
				}
				zoom = (zoom > 1 ? zoom : 1 / (2 - zoom));
				this.scaleCarta(zoom);
				if (zoom == 1) {
					var centerof = this.centerOf();
//          this.centerCarta(centerof[0] + this.m.offset[0] - this.m.scaleoff[0],
//                           centerof[1] + this.m.offset[1] - this.m.scaleoff[1], true);
				}
			}
		},
		chkPts: function (pts) {
			return (pts && !isNaN(pts[0]) && !isNaN(pts[1]));
		},
		resize: function (w, h) {
			attr(root, {
				width: w,
				height: h
			});
			this.m.delta = w / 360;
			this.m.halfX = w / 2.0;
			this.m.halfY = h / 2.0;
		},
		// - reproject ------------------------
		/!**
		 * Change project to NEW_PROJECT and center by visible centre.
		 *!/
		changeProject: function (new_project) {
			// curr. centerof
			var centerof = this.centerOf();
			if (this.isTurnable()) {
				var proj = this.initProj();
				viewcenterof = [proj.long0 * 180 / Math.PI, proj.lat0 * 180 / Math.PI];
			} else {
				var viewcenterof = this.fromPoints(centerof, true);
			}
			// new centerof
			if (this.isTurnable(new_project)) {
//        this.centerCarta([centerof[0] + this.m.offset[0], centerof[1] + this.m.offset[1]]);
				this.initProj(new_project, ' +lon_0=' + viewcenterof[0] + ' +lat_0=' + viewcenterof[1]);
			} else {
				this.initProj(new_project, ' +lon_0=0 +lat_0=0');
				var centerof = this.toPoints(viewcenterof, true);
				if (!this.chkPts(centerof)) centerof = [0, 0];
//        this.centerCarta([centerof[0] + this.m.offset[0], centerof[1] + this.m.offset[1]]);
			}
		},
		/!**
		 * Change project. to PROJECT with DEFS (see Proj4js proj. definitions).
		 * If no args return current projection info (Proj4js.Proj obj.).
		 *!/
		initProj: function (project, defs) {
			if ('Proj4js' in window) {
				if (project !== undefined) {
					if (defs == undefined) {
						defs = project;
						project = this.project;
					}
					var old_defs = Proj4js.defs[String(project)],
						new_defs = this.projlist[project] + (defs || '');
					this.m.doreload = (this.project != project) || (old_defs != new_defs); // recalc points?
					this.project = project;
					Proj4js.defs[String(project)] = new_defs;
				}
				if (String(this.project) in Proj4js.defs) {
					this.projload['epsg:4326'] = new Proj4js.Proj('epsg:4326');
					this.projload[String(this.project)] = new Proj4js.Proj(String(this.project));
					return this.projload[String(this.project)];
				}
			}
		},
		isSpherical: function (project) {
			project = project || this.project;
			return (project > 200 && project < 300);
		},
		isTurnable: function (project) {
			project = project || this.project;
			return (project == 202 || project == 203);
		},
		toPoints: function (coords, dotransform) {
			var m = coords;
			if (dotransform && this.project != 0) {
				if (!(coords = this.transformCoords('epsg:4326', String(this.project), coords))) return;
				else if (!coords[2]) return; //backside filter
			}
			var pts = [coords[0] * this.m.delta + this.m.halfX,
				-coords[1] * this.m.delta + this.m.halfY];
			if (m[2]) pts.push(m[2]); // bezier flag
			return pts;
		},
		/!**
		 * Convert points to degrees.
		 * Use projection transform. DOTRANSFORM [0|1] and matrix transform. DONTSCALE [0|1].
		 *!/
		fromPoints: function (pts, dotransform, dontscale) {
			if (dontscale) { // dont use matrix transformations
				var coords = [(pts[0] - this.m.halfX) / this.m.delta,
					-(pts[1] - this.m.halfY) / this.m.delta];
			} else {
				var coords = [(pts[0] / this.m.scale - this.m.halfX / this.m.scale - this.m.offset[0]) / this.m.delta,
					-(pts[1] / this.m.scale - this.m.halfY / this.m.scale - this.m.offset[1]) / this.m.delta];
			}
			if (dotransform && this.project != 0 && coords[0] != 0 && coords[1] != 0) {
				if (!(coords = this.transformCoords(String(this.project), 'epsg:4326', coords))) return;
			}
			return coords;
		},
		/!**
		 * Return spherical arc between CRD1 and CRD2 in degrees.
		 *!/
		distance: function (coord1, coord2) {
			var x = coord1[0] * Math.PI / 180.0,
				y = coord1[1] * Math.PI / 180.0,
				x1 = coord2[0] * Math.PI / 180.0,
				y1 = coord2[1] * Math.PI / 180.0;
			return Math.acos(Math.cos(y) * Math.cos(y1) * Math.cos(x - x1) + Math.sin(y) * Math.sin(y1)) * 180.0 / Math.PI;
		},
		/!**
		 * Interpolate (and convert to points if DOPOINTS) coords with STEP in degrees.
		 *!/
		interpolateCoords: function (coords, dopoints, step) {
			var i, pts, interpol_pts = [];
			for (var j in coords) {
				if (!coords[j]) {
					continue;
				} else if (!i || !step) {
					if (pts = (dopoints ? this.toPoints(coords[j], true) : coords[j]))
						interpol_pts.push(pts);
				} else {
					var x = coords[i][0],
						y = coords[i][1],
						x1 = coords[j][0],
						y1 = coords[j][1];
					var d = this.distance([x, y], [x1, y1]),
						scalestep = 1;
					if (d > step)
						scalestep = parseInt(d / step);
					var _x = x, _y = y;
					for (var k = 0; k < scalestep; k++) {
						_x += (x1 - x) / scalestep;
						_y += (y1 - y) / scalestep;
						if (pts = (dopoints ? this.toPoints([_x, _y], true) : [_x, _y]))
							interpol_pts.push(pts);
					}
				}
				i = j;
			}
			return interpol_pts;
		},
		/!**
		 * Reproject COORDS from SOURCE to DEST proj4 string definition.
		 *!/
		transformCoords: function (sourcestr, deststr, coords) {
			if ('Proj4js' in window) {
				var sourceproj = this.projload[sourcestr],
					destproj = this.projload[deststr];
				if (destproj.projName == 'longlat') {
					coords[0] = sourceproj.a * coords[0] * Proj4js.common.D2R;
					coords[1] = sourceproj.a * coords[1] * Proj4js.common.D2R;
				}
				var sourcept = new Proj4js.Point(coords[0], coords[1]);
				var destpt = Proj4js.transform(sourceproj, destproj, sourcept);
				if (!isNaN(destpt.x) && !isNaN(destpt.y)) {
					if (sourceproj.projName == 'longlat') {
						return [destpt.x / destproj.a * Proj4js.common.R2D,
							destpt.y / destproj.a * Proj4js.common.R2D,
							!isNaN(destpt.z)];
					} else {
						return [destpt.x, destpt.y];
					}
				}
			} else
				return coords;
		},
		/!**
		 * Return new COORDS rotated around Z-axis with ANGLE relative to CENTEROF.
		 *!/
		rotateCoords: function (coords, angle, centerof) {
			var roll = angle * Math.PI / 180,
				x = coords[0], y = coords[1], cx = centerof[0], cy = centerof[1],
				r = Math.sqrt((cx - x) * (cx - x) + (y - cy) * (y - cy));
			if (r > 0) {
				var a = Math.acos((cx - x) / r);
				if (y < cy) a = 2.0 * Math.PI - a;
				coords = [cx - r * Math.cos(roll + a),
					cy + r * Math.sin(roll + a)];
			}
			return coords;
		},
		// - handlers -----------------------------
		mousemove: function (ev) {
			var spts = this.canvasXY(ev),
				pts = this.rotateCoords(spts, this.m.rotate, this.centerOf());
			if (this.m.mpts && this.cfg.draggable) {
				this.centerCarta(pts, true);
			}
			if (this.m.pmap) {
				if (this.m.pmap.i === 0) {
					attr(this.m.pmap.ev.target, this.m.pmap.attr);
					delete this.m.pmap;
				} else
					this.m.pmap.i = 0;
			}
		},
		mousedown: function (ev) {
			if (ev.preventDefault) {
				ev.preventDefault();
			}
			var spts = this.canvasXY(ev),
				pts = this.rotateCoords(spts, this.m.rotate, this.centerOf());
			if (this.m.mbar = this.chkBar(spts)) { // if bar
				return;
			} else if (this.isTurnable()) { // proj.center for spherical turn
				var dst = this.fromPoints(pts, true);
				if (dst) {
					var proj = this.initProj();
					this.initProj(' +h=' + proj.h + ' +lon_0=' + dst[0] + ' +lat_0=' + dst[1]);
				}
			} else { // for drag
				this.m.mpts = [
					pts[0] / this.m.scale - this.m.offset[0],
					pts[1] / this.m.scale - this.m.offset[1]];
			}
		},
		mouseup: function (ev) {
			var spts = this.canvasXY(ev),
				pts = this.rotateCoords(spts, this.m.rotate, this.centerOf());
			if (this.m.mbar) { // bar
				this.chkBar(spts, true);
			}
			with (this.m) {
				delete mpts;
			}
		}
	});
	// - events -----------------------------
	extend(root, {
		mousewheel: function (ev) {
			var delta = 0;
			if (ev.wheelDelta) { // WebKit / Opera / Explorer 9
				delta = ev.wheelDelta / 40;
			} else if (ev.detail) { // Firefox
				delta = -ev.detail / 3;
			}
			var zoom = (self.m.scale > 1 ? self.m.scale : 2 - 1 / self.m.scale);
			zoom += delta * 0.1;
			zoom = (zoom > 1 ? zoom : 1 / (2 - zoom));
			self.scaleCarta(zoom);
		},
		touchmove: function (ev) {
			var touches = ev.changedTouches;
			if (self.m.touches.length < 2) {
				ev.preventDefault();
				self.mousemove(touches[touches.length - 1]);
			}
		},
		touchstart: function (ev) {
			self.m.dotouch = true;
			var touches = ev.changedTouches;
			for (var i = 0; i < touches.length; i++)
				self.m.touches.push(touches[i]);
			if (touches.length)
				self.mousedown(touches[0]);
		},
		touchend: function (ev) {
			var touches = ev.changedTouches;
			for (var i = 0; i < touches.length; i++) {
				for (var j = 0; j < self.m.touches.length; j++) {
					if (self.m.touches[j].identifier == touches[i].identifier)
						self.m.touches.splice(j, 1);
				}
			}
			if (!self.m.touches.length)
				self.mouseup(touches[touches.length - 1]);
		},
		onmousemove: function (ev) {
			self.mousemove(ev);
		},
		onmousedown: function (ev) {
			if (!self.m.dotouch) self.mousedown(ev);
		},
		onmouseup: function (ev) {
			if (!self.m.dotouch) self.mouseup(ev);
		}
	});
	root.addEventListener('mousewheel', root.mousewheel, false);
	root.addEventListener('DOMMouseScroll', root.mousewheel, false); // firefox
	root.addEventListener('touchmove', root.touchmove, false);
	root.addEventListener('touchstart', root.touchstart, false);
	root.addEventListener('touchend', root.touchend, false);
	root.addEventListener("touchleave", root.touchend, false);

	this.paintBar();
	return this;
}
var allmaps = [];
function initmaps() {
	addMetaTags('Карта метро, Схема метро Москвы, mosmetro');
	for (var i in allmaps) {
		allmaps[i]();
	}
}
if (window.addEventListener) {
	window.addEventListener('load', initmaps, false);
} else {
	window.attachEvent('onload', initmaps);
}
var dw;
// domap tooltip
var el = document.createElement('div');
el.id = 'maptooltip';
el.style.padding = '5px';
el.style.color = '#333333';
el.style.font = '12px Verdana';
el.style.border = '2px solid rgba(19,64,117,0.5)';
el.style.borderRadius = '4px';
el.style.backgroundColor = 'rgba(250,250,250,0.9)';
el.style.position = 'absolute';
el.style.zIndex = '10000';
el.style.display = 'none';
el.onmousemove = function () {
	this.innerHTML = '';
};
document.body.appendChild(el);
// tooltip under cursor
function infobox(ev) {
	var mtip = document.getElementById('maptooltip');
	if (dw.m.pmap) {
		mtip.innerHTML = dw.m.pmap.ev.target.getAttribute('class');
		mtip.style.display = 'block';
		mtip.style.left = ev.clientX + window.pageXOffset + 'px';
		mtip.style.top = ev.clientY + window.pageYOffset - mtip.offsetHeight * 1.2 + 'px';
	} else {
		mtip.style.display = 'none';
	}
}
function draw() {
	var mopt = {};
	var route = function (o) {
			return dw.extend({cls: 'Line', width: 6, anchor: ['start', 'middle'], labelscale: 1}, o || {})
		},
		route_d = function (o) {
			return route(dw.extend({dash: [2, 4]}, o || {}))
		},
		interchange = function (o) {
			return route(dw.extend({fg: '#ccc', join: 'round', cap: 'round', width: 8}, o || {}))
		},
		interchange_d = function (o) {
			return interchange(dw.extend({fg: '#ffffff', width: 4}, o || {}))
		},
		river = function (o) {
			return route(dw.extend({
				fg: '#e2fcfc',
				join: 'round',
				cap: 'round',
				labelcolor: '#5555ff',
				labelscale: 0
			}, o || {}))
		},
		aeroexpress = function (o) {
			return route(dw.extend({fg: '#dddddd', labelscale: 0}, o || {}))
		},
		aeroexpress_d = function (o) {
			return route(dw.extend({fg: '#ffffff', labelscale: 0, width: 4, dash: [10, 10]}, o || {}))
		},
		label = function (o) {
			return dw.extend({cls: 'Label', labelscale: 1, anchor: ['start', 'top']}, o || {})
		},
		station = function (o) {
			return dw.extend({cls: 'Rect', bg: 'white', size: 5, width: 3, scale: 1, labelscale: 1}, o || {})
		},
		mck_station = function (o) {
			return station(dw.extend({fg: '#f76093', size: 4, labelcolor: 'gray'}, o))
		},
		mck_interchange_d = function (o) {
			return interchange(dw.extend({dash: [2, 4], width: 3}, o || {}))
		},
		inst = function (o) {
			return station(dw.extend({size: 4, labelcolor: o['fg'], bg: o['fg']}, o))
		},
		inst_d = function (o) {
			return inst(dw.extend({size: 2, width: 1}, o || {}))
		};
	// lines
	dw.extend(mopt, {
		'r1': route({fg: '#ed1b35'}),
		'r2': route({fg: '#44b85c'}),
		'r3': route({fg: '#0078bf'}),
		'r4': route({fg: '#19c1f3'}),
		'r5': route({fg: '#894e35'}),
		'r6': route({fg: '#f58631'}),
		'r7': route({fg: '#8e479c'}),
		'r8': route({fg: '#ffcb31'}),
		'r9': route({fg: '#a1a2a3'}),
		'r10': route({fg: '#b3d445'}),
		'r11': route({fg: '#79cdcd'}),
		'r12': route({fg: '#acbfe1'}),
		'rTPK': route_d({fg: '#554d26'}),
		'rKOZH': route_d({fg: '#de62be'})
	});
	// lines ext
	dw.extend(mopt, {
		'r1_ext': route_d({fg: mopt['r1'].fg}),
		'r2_ext': route_d({fg: mopt['r2'].fg}),
		'r6_ext': route_d({fg: mopt['r6'].fg}),
		'r7_ext': route_d({fg: mopt['r7'].fg}),
		'r8_ext': route_d({fg: mopt['r8'].fg}),
		'r10_ext': route_d({fg: mopt['r10'].fg}),
		'r12_ext': route_d({fg: mopt['r12'].fg})
	});
	// interchanges
	dw.extend(mopt, {
		'interchange': interchange(),
		'interchange_d': interchange_d(),
		'mck_interchange_d': mck_interchange_d()
	});
	// rivers
	dw.extend(mopt, {
		'moskva_canal': river({width: 5}),
		'moskva_canal_label': river({rotate: -90, anchor: ['start', 'middle']}),
		'strogino_lake_exit': river({cls: 'Polygon', bg: river().fg, width: 5}),
		'vodootvodny_canal': river({width: 5}),
		'yauza_river': river({width: 5}),
		'yauza_river_label': river({rotate: 45, anchor: ['start', 'top']}),
		'Nagatino_poyma': river({width: 6}),
		'grebnoy_canal': river({width: 3}),
		'moskva_river': river({width: 15}),
		'moskva_river_label': river({rotate: 45, anchor: ['start', 'top']})
	});
	// rails
	dw.extend(mopt, {
		'monorail': route({fg: '#2c87c5', width: 2}),
		'monorail_legend': route({fg: '#2c87c5', width: 2}),
		'monorail_label': route({labelcolor: '#2c87c5', anchor: ['start', 'bottom']}),
		'mck': route({fg: '#f76093'}),
		'mck_d': route({fg: 'white', width: 2}),
		'sheremetyevo_express_line': aeroexpress(),
		'sheremetyevo_express_line_label': label({anchor: ['end', 'middle']}),
		'sheremetyevo_express_line_d': aeroexpress_d(),
		'sheremetyevo_express_line_d_label': label({anchor: ['end', 'top']}),
		'vnukovo_express_line': aeroexpress(),
		'vnukovo_express_line_label': label({anchor: ['start', 'middle']}),
		'vnukovo_express_line_d': aeroexpress_d(),
		'vnukovo_express_line_d_label': label({anchor: ['center', 'top']}),
		'domodedovo_express_line': aeroexpress(),
		'domodedovo_express_line_label': label({anchor: ['start', 'middle']}),
		'domodedovo_express_line_d': aeroexpress_d(),
		'domodedovo_express_line_d_label': label()
	});
	// stations
	dw.extend(mopt, {
		's1': station({fg: mopt['r1'].fg, anchor: ['start', 'middle']}),
		's1_1': inst({fg: mopt['r1'].fg, anchor: ['start', 'middle']}),
		's1_2': inst({fg: mopt['r1'].fg, anchor: ['end', 'middle']}),
		's1_3': inst({fg: mopt['r1'].fg, anchor: ['end', 'bottom']}),
		's1_4': inst({fg: mopt['r1'].fg, anchor: ['start', 'top']}),
		's2': station({fg: mopt['r2'].fg}),
		's2_1': inst({fg: mopt['r2'].fg}),
		's2_2': inst({fg: mopt['r2'].fg, anchor: ['end', 'middle']}),
		's2_3': inst({fg: mopt['r2'].fg, anchor: ['start', 'bottom']}),
		's2_4': station({fg: mopt['r2'].fg, anchor: ['end', 'middle']}),
		's2_5': inst({fg: mopt['r2'].fg, anchor: ['end', 'top']}),
		's2_6': station({fg: mopt['r2'].fg, anchor: ['start', 'top']}),
		's3': station({fg: mopt['r3'].fg, anchor: ['start', 'middle']}),
		's3_1': station({fg: mopt['r3'].fg, anchor: ['end', 'middle']}),
		's3_2': station({fg: mopt['r3'].fg, anchor: ['end', 'top']}),
		's3_3': inst({fg: mopt['r3'].fg, anchor: ['end', 'bottom']}),
		's3_4': inst({fg: mopt['r3'].fg, anchor: ['start', 'bottom']}),
		's3_5': inst({fg: mopt['r3'].fg, anchor: ['end', 'top']}),
		's3_6': inst({fg: mopt['r3'].fg, anchor: ['end', 'middle']}),
		's3_7': inst({fg: mopt['r3'].fg, anchor: ['end']}),
		's3_8': inst({fg: mopt['r3'].fg, anchor: ['center', 'bottom']}),
		's4': station({fg: mopt['r4'].fg}),
		's4_1': station({fg: mopt['r4'].fg, anchor: ['end', 'top']}),
		's4_2': inst({fg: mopt['r4'].fg, anchor: ['end', 'middle']}),
		's4_3': station({fg: mopt['r4'].fg, anchor: ['start', 'bottom']}),
		's4_4': inst({fg: mopt['r4'].fg, anchor: ['start', 'bottom']}),
		's4_5': inst_d({fg: mopt['r4'].fg}),
		's4_6': station({fg: mopt['r4'].fg, anchor: ['center', 'bottom']}),
		's5': inst({fg: mopt['r5'].fg}),
		's5_1': inst({fg: mopt['r5'].fg, anchor: ['end', 'bottom']}),
		's5_2': inst({fg: mopt['r5'].fg, anchor: ['start', 'middle']}),
		's6': station({fg: mopt['r6'].fg, anchor: ['start', 'middle']}),
		's6_1': station({fg: mopt['r6'].fg, anchor: ['end', 'middle']}),
		's6_2': inst({fg: mopt['r6'].fg, anchor: ['start', 'middle']}),
		's6_3': inst({fg: mopt['r6'].fg, anchor: ['end', 'bottom']}),
		's6_4': inst({fg: mopt['r6'].fg, anchor: ['start', 'top']}),
		's6_5': inst({fg: mopt['r6'].fg, anchor: ['end', 'middle']}),
		's6_6': inst({fg: mopt['r6'].fg, anchor: ['end', 'top']}),
		's6_7': inst({fg: mopt['r6'].fg, anchor: ['start', 'bottom']}),
		's7': station({fg: mopt['r7'].fg, anchor: ['end', 'middle']}),
		's7_1': inst({fg: mopt['r7'].fg, anchor: ['end', 'middle']}),
		's7_2': inst({fg: mopt['r7'].fg, anchor: ['start', 'bottom']}),
		's7_3': inst({fg: mopt['r7'].fg, anchor: ['start', 'top']}),
		's7_4': station({fg: mopt['r7'].fg, anchor: ['start', 'bottom']}),
		's7_5': inst_d({fg: mopt['r7'].fg}),
		's7_6': inst({fg: mopt['r7'].fg, anchor: ['start', 'middle']}),
		's7_7': station({fg: mopt['r7'].fg, anchor: ['center', 'bottom']}),
		's7_8': station({fg: mopt['r7'].fg, anchor: ['end', 'top']}),
		's8': station({fg: mopt['r8'].fg, anchor: ['start', 'middle']}),
		's8_1': inst({fg: mopt['r8'].fg}),
		's8_2': inst({fg: mopt['r8'].fg, anchor: ['start', 'top']}),
		's8_3': inst({fg: mopt['r8'].fg, anchor: ['start', 'top']}),
		's8_4': inst({fg: mopt['r8'].fg, anchor: ['end', 'top']}),
		's8_5': inst({fg: mopt['r8'].fg, anchor: ['end', 'bottom']}),
		's8_6': inst_d({fg: mopt['r8'].fg}),
		's9': station({fg: mopt['r9'].fg, anchor: ['start', 'middle']}),
		's9_1': inst({fg: mopt['r9'].fg, anchor: ['end', 'middle']}),
		's9_2': inst({fg: mopt['r9'].fg, anchor: ['start', 'middle']}),
		's9_3': inst({fg: mopt['r9'].fg, anchor: ['start', 'top']}),
		's9_4': station({fg: mopt['r9'].fg, anchor: ['end', 'middle']}),
		's9_5': inst({fg: mopt['r9'].fg, anchor: ['start', 'bottom']}),
		's9_6': inst({fg: mopt['r9'].fg, anchor: ['end', 'top']}),
		's10': station({fg: mopt['r10'].fg, anchor: ['end', 'middle']}),
		's10_1': station({fg: mopt['r10'].fg, anchor: ['start', 'middle']}),
		's10_2': inst({fg: mopt['r10'].fg, anchor: ['start', 'middle']}),
		's10_3': inst({fg: mopt['r10'].fg, anchor: ['end', 'top']}),
		's10_4': inst_d({fg: mopt['r10'].fg}),
		's11': station({fg: mopt['r11'].fg, anchor: ['center', 'bottom']}),
		's11_1': inst({fg: mopt['r11'].fg, anchor: ['start', 'top']}),
		's11_2': inst_d({fg: mopt['r11'].fg}),
		's12': station({fg: mopt['r12'].fg, anchor: ['center', 'bottom']}),
		's12_1': station({fg: mopt['r12'].fg, anchor: ['center', 'top']}),
		's12_2': station({fg: mopt['r12'].fg, anchor: ['start', 'top']}),
		's12_3': station({fg: mopt['r12'].fg, anchor: ['end', 'middle']}),
		's12_4': inst({fg: mopt['r12'].fg, anchor: ['center', 'bottom']}),
		's12_5': inst({fg: mopt['r12'].fg, anchor: ['start', 'top']}),
		'sTPK': station({fg: mopt['rTPK'].fg, anchor: ['start', 'top']}),
		'sTPK_1': station({fg: mopt['rTPK'].fg, anchor: ['start', 'middle']}),
		'sTPK_2': station({fg: mopt['rTPK'].fg, anchor: ['end', 'middle']}),
		'sTPK_3': inst({fg: mopt['rTPK'].fg, anchor: ['start', 'middle']}),
		'sTPK_4': inst({fg: mopt['rTPK'].fg, anchor: ['start', 'bottom']}),
		'sTPK_5': inst_d({fg: mopt['rTPK'].fg}),
		'sTPK_6': station({fg: mopt['rTPK'].fg, anchor: ['center', 'bottom']}),
		'sTPK_7': station({fg: mopt['rTPK'].fg, anchor: ['start', 'middle']}),
		'sTPK_8': station({fg: mopt['rTPK'].fg, anchor: ['end', 'bottom']}),
		'sTPK_9': inst({fg: mopt['rTPK'].fg, anchor: ['end', 'middle']}),
		'sTPK_10': station({fg: mopt['rTPK'].fg, anchor: ['start', 'bottom']}),
		'sTPK_11': inst({fg: mopt['rTPK'].fg, anchor: ['start', 'top']}),
		'sTPK_12': inst({fg: mopt['rTPK'].fg, anchor: ['end', 'top']}),
		'sTPK_13': inst({fg: mopt['rTPK'].fg, anchor: ['center', 'top']}),
		'sTPK_14': inst({fg: mopt['rTPK'].fg, anchor: ['center', 'bottom']}),
		'sKOZH': station({fg: mopt['rKOZH'].fg, anchor: ['start', 'middle']}),
		'sKOZH_1': station({fg: mopt['rKOZH'].fg, anchor: ['end', 'middle']}),
		'sKOZH_2': inst({fg: mopt['rKOZH'].fg, anchor: ['start', 'middle']}),
		'sKOZH_3': inst_d({fg: mopt['rKOZH'].fg, anchor: ['start', 'middle']}),
		'sMono': inst({fg: mopt['monorail'].fg, size: 3, anchor: ['start', 'top']}),
		'sMono_1': inst({fg: mopt['monorail'].fg, size: 3, anchor: ['start', 'middle']}),
		'sMCK': mck_station({anchor: ['start', 'middle']}),
		'sMCK_1': mck_station({anchor: ['start', 'top']}),
		'sMCK_2': mck_station({anchor: ['end', 'middle']}),
		'sMCK_3': mck_station({anchor: ['center', 'bottom']}),
		'sMCK_4': mck_station({anchor: ['start', 'bottom']})
	});
	// lines
	for (var i = 0; i < MLINES.length; i++) {
		var ftype = MLINES[i][0],
			abbr = MLINES[i][1],
			coords = MLINES[i][2];
		var pts = dw.interpolateCoords(coords, true),
			mpts = [], n = 0;
		for (var j = 0; j < pts.length; j++) {
			if (pts[j][2] == 'Q') { // bezier check
				n++;
				if (j > 0 && n == 1) mpts.push('L');
				else if (n == 2) mpts.push('Q');
				else if (n > 2) n = 0;
			} else if (j > 0) {
				mpts.push('L');
			}
			mpts.push(pts[j][0], pts[j][1]);
		}
		var path = ('M ' + mpts).replace(/,/g, ' ');
		var o = dw.append('path', {
			class: [i, ftype, abbr].join(),
			fill: 'transparent',
			stroke: mopt[ftype].fg,
			'stroke-dasharray': mopt[ftype].dash,
			'stroke-linejoin': mopt[ftype].join,
			'stroke-linecap': mopt[ftype].cap,
			'stroke-width': mopt[ftype].width,
			d: path
		});
	}
	;
	// stations
	for (var i = 0; i < MSTATIONS.length; i++) {
		var ftype = MSTATIONS[i][0],
			abbr = MSTATIONS[i][1],
			coords = MSTATIONS[i][2][0],
			label = MSTATIONS[i][3];
		var pts = dw.toPoints(coords, true),
			a, dx = 10, dy = 0;
		var station = dw.append('circle', {
			class: label,
			cx: pts[0], cy: pts[1], r: mopt[ftype].size,
			fill: mopt[ftype].bg,
			stroke: mopt[ftype].fg
		});
		if (!label) continue;
		if (a = mopt[ftype].anchor) {
			if (a[0] == 'start') dx = 10;
			else if (a[0] == 'center') dx = -40;
			else if (a[0] == 'end') dx = -10;
			if (a[1] == 'top') dy = 10;
			else if (a[1] == 'middle') dy = 4;
			else if (a[1] == 'bottom') dy = -10;
		}
		;
		var text = dw.append('text', {
			x: pts[0] + dx, y: pts[1] + dy,
			fill: mopt[ftype].labelcolor || '',
			'font-family': 'sans-serif', 'font-size': '0px',
			'text-anchor': a ? a[0] : ''
		});
		text.appendChild(document.createTextNode(station.getAttribute('class')));
		dw.extend(station, {
			onmousemove: function (ev) {
				var scale = 3;
				var ratio = scale / (scale - 1);
				var cx = this.getAttribute('cx') / ratio,
					cy = this.getAttribute('cy') / ratio;
				dw.doMap(ev, {
					display: 'block',
					transform: 'scale(' + scale + ') translate(' + -cx + ',' + -cy + ')'
				});
			}
		});
	}
	;
	// labels (MLABEL)
	for (var i = 0; i < MLABEL.length; i++) {
		var ftype = MLABEL[i][0],
			label = MLABEL[i][3],
			coords = MLABEL[i][4];
		var pts = dw.toPoints(coords, true);
		if (a = mopt[ftype].anchor) {
			if (a[0] == 'start') dx = 10;
			else if (a[0] == 'center') dx = -40;
			else if (a[0] == 'end') dx = -10;
			if (a[1] == 'top') dy = 10;
			else if (a[1] == 'middle') dy = 4;
			else if (a[1] == 'bottom') dy = -10;
		}
		;
		var text = dw.append('text', {
			x: pts[0] + dx, y: pts[1] + dy,
			fill: mopt[ftype].labelcolor || '',
			'font-family': 'sans-serif', 'font-size': '9px',
			'text-anchor': a ? a[0] : ''
		});
		if ('rotate' in mopt[ftype]) {
			dw.attr(text, {
				transform: 'rotate(' + mopt[ftype].rotate + ',' + pts[0] + ',' + pts[1] + ')'
			});
		}
		text.appendChild(document.createTextNode(label));
	}
	;
};

dw = new dbCartaSvg({
	id: 'mcont',
	width: '350',
	height: document.getElementById('mcont').offsetHeight,
	sbarpos: 'left',
	bg: 'white'
});
// events
// dw.extend(dw.root, {
// 	onmousemove: function (ev) {
// 		dw.mousemove(ev);
// 		infobox(ev);
// 	}
// });
allmaps.push(draw);*/
